{"version":3,"file":"main-3dca9093.js","sources":["../../src/components/account-block.jsx","../../src/components/account.jsx","../../src/components/drafts.jsx","../../src/components/media-modal.jsx","../../src/components/AsyncText.jsx","../../src/components/shortcuts-settings.jsx","../../src/components/shortcuts.jsx","../../src/utils/usePageVisibility.js","../../src/utils/useScroll.js","../../src/components/menu.jsx","../../src/components/timeline.jsx","../../src/pages/account-statuses.jsx","../../src/pages/bookmarks.jsx","../../src/pages/favourites.jsx","../../src/pages/followed-hashtags.jsx","../../src/pages/following.jsx","../../src/pages/hashtag.jsx","../../src/pages/list.jsx","../../src/pages/notifications.jsx","../../src/pages/public.jsx","../../src/components/columns.jsx","../../src/pages/home.jsx","../../src/pages/home-v1.jsx","../../src/pages/lists.jsx","../../src/data/instances.json?url","../../src/utils/auth.js","../../src/pages/login.jsx","../../src/pages/search.jsx","../../src/assets/logo.svg","../../src/pages/settings.jsx","../../src/pages/status.jsx","../../src/pages/welcome.jsx","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["import './account-block.css';\n\nimport emojifyText from '../utils/emojify-text';\nimport states from '../utils/states';\n\nimport Avatar from './avatar';\n\nfunction AccountBlock({\n  skeleton,\n  account,\n  avatarSize = 'xl',\n  instance,\n  external,\n  onClick,\n}) {\n  if (skeleton) {\n    return (\n      <div class=\"account-block skeleton\">\n        <Avatar size={avatarSize} />\n        <span>\n          <b>████████</b>\n          <br />\n          @██████\n        </span>\n      </div>\n    );\n  }\n\n  const { acct, avatar, avatarStatic, displayName, username, emojis, url } =\n    account;\n  const displayNameWithEmoji = emojifyText(displayName, emojis);\n\n  return (\n    <a\n      class=\"account-block\"\n      href={url}\n      target={external ? '_blank' : null}\n      title={`@${acct}`}\n      onClick={(e) => {\n        if (external) return;\n        e.preventDefault();\n        if (onClick) return onClick(e);\n        states.showAccount = {\n          account,\n          instance,\n        };\n      }}\n    >\n      <Avatar url={avatar} size={avatarSize} />\n      <span>\n        {displayName ? (\n          <b\n            dangerouslySetInnerHTML={{\n              __html: displayNameWithEmoji,\n            }}\n          />\n        ) : (\n          <b>{username}</b>\n        )}\n        <br />@{acct}\n      </span>\n    </a>\n  );\n}\n\nexport default AccountBlock;\n","import './account.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { api } from '../utils/api';\nimport emojifyText from '../utils/emojify-text';\nimport enhanceContent from '../utils/enhance-content';\nimport handleContentLinks from '../utils/handle-content-links';\nimport shortenNumber from '../utils/shorten-number';\nimport states, { hideAllModals } from '../utils/states';\nimport store from '../utils/store';\n\nimport AccountBlock from './account-block';\nimport Avatar from './avatar';\nimport Icon from './icon';\nimport Link from './link';\n\nfunction Account({ account, instance: propInstance, onClose }) {\n  const { masto, instance, authenticated } = api({ instance: propInstance });\n  const [uiState, setUIState] = useState('default');\n  const isString = typeof account === 'string';\n  const [info, setInfo] = useState(isString ? null : account);\n\n  useEffect(() => {\n    if (isString) {\n      setUIState('loading');\n      (async () => {\n        try {\n          const info = await masto.v1.accounts.lookup({\n            acct: account,\n            skip_webfinger: false,\n          });\n          setInfo(info);\n          setUIState('default');\n        } catch (e) {\n          try {\n            const result = await masto.v2.search({\n              q: account,\n              type: 'accounts',\n              limit: 1,\n              resolve: authenticated,\n            });\n            if (result.accounts.length) {\n              setInfo(result.accounts[0]);\n              setUIState('default');\n              return;\n            }\n            setInfo(null);\n            setUIState('error');\n          } catch (err) {\n            console.error(err);\n            setInfo(null);\n            setUIState('error');\n          }\n        }\n      })();\n    } else {\n      setInfo(account);\n    }\n  }, [account]);\n\n  const {\n    acct,\n    avatar,\n    avatarStatic,\n    bot,\n    createdAt,\n    displayName,\n    emojis,\n    fields,\n    followersCount,\n    followingCount,\n    group,\n    header,\n    headerStatic,\n    id,\n    lastStatusAt,\n    locked,\n    note,\n    statusesCount,\n    url,\n    username,\n  } = info || {};\n\n  const escRef = useHotkeys('esc', onClose, [onClose]);\n\n  return (\n    <div\n      ref={escRef}\n      id=\"account-container\"\n      class={`sheet ${uiState === 'loading' ? 'skeleton' : ''}`}\n    >\n      {uiState === 'error' && (\n        <div class=\"ui-state\">\n          <p>Unable to load account.</p>\n          <p>\n            <a href={account} target=\"_blank\">\n              Go to account page <Icon icon=\"external\" />\n            </a>\n          </p>\n        </div>\n      )}\n      {uiState === 'loading' ? (\n        <>\n          <header>\n            <AccountBlock avatarSize=\"xxxl\" skeleton />\n          </header>\n          <main>\n            <div class=\"note\">\n              <p>████████ ███████</p>\n              <p>███████████████ ███████████████</p>\n            </div>\n            <p class=\"stats\">\n              <span>██ Posts</span>\n              <span>██ Following</span>\n              <span>██ Followers</span>\n            </p>\n          </main>\n        </>\n      ) : (\n        info && (\n          <>\n            <header>\n              <AccountBlock\n                account={info}\n                instance={instance}\n                avatarSize=\"xxxl\"\n                external\n              />\n            </header>\n            <main tabIndex=\"-1\">\n              {bot && (\n                <>\n                  <span class=\"tag\">\n                    <Icon icon=\"bot\" /> Automated\n                  </span>\n                </>\n              )}\n              <div\n                class=\"note\"\n                onClick={handleContentLinks({\n                  instance,\n                })}\n                dangerouslySetInnerHTML={{\n                  __html: enhanceContent(note, { emojis }),\n                }}\n              />\n              {fields?.length > 0 && (\n                <div class=\"profile-metadata\">\n                  {fields.map(({ name, value, verifiedAt }) => (\n                    <div\n                      class={`profile-field ${\n                        verifiedAt ? 'profile-verified' : ''\n                      }`}\n                      key={name}\n                    >\n                      <b>\n                        <span\n                          dangerouslySetInnerHTML={{\n                            __html: emojifyText(name, emojis),\n                          }}\n                        />{' '}\n                        {!!verifiedAt && <Icon icon=\"check-circle\" size=\"s\" />}\n                      </b>\n                      <p\n                        dangerouslySetInnerHTML={{\n                          __html: enhanceContent(value, { emojis }),\n                        }}\n                      />\n                    </div>\n                  ))}\n                </div>\n              )}\n              <p class=\"stats\">\n                <Link\n                  to={instance ? `/${instance}/a/${id}` : `/a/${id}`}\n                  onClick={() => {\n                    hideAllModals();\n                  }}\n                >\n                  Posts\n                  <br />\n                  <b title={statusesCount}>\n                    {shortenNumber(statusesCount)}\n                  </b>{' '}\n                </Link>\n                <span>\n                  Following\n                  <br />\n                  <b title={followingCount}>\n                    {shortenNumber(followingCount)}\n                  </b>{' '}\n                </span>\n                <span>\n                  Followers\n                  <br />\n                  <b title={followersCount}>\n                    {shortenNumber(followersCount)}\n                  </b>{' '}\n                </span>\n                {!!createdAt && (\n                  <span>\n                    Joined\n                    <br />\n                    <b>\n                      <time datetime={createdAt}>\n                        {Intl.DateTimeFormat('en', {\n                          year: 'numeric',\n                          month: 'short',\n                          day: 'numeric',\n                        }).format(new Date(createdAt))}\n                      </time>\n                    </b>\n                  </span>\n                )}\n              </p>\n              <RelatedActions\n                info={info}\n                instance={instance}\n                authenticated={authenticated}\n              />\n            </main>\n          </>\n        )\n      )}\n    </div>\n  );\n}\n\nfunction RelatedActions({ info, instance, authenticated }) {\n  if (!info) return null;\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n\n  const [relationshipUIState, setRelationshipUIState] = useState('default');\n  const [relationship, setRelationship] = useState(null);\n  const [familiarFollowers, setFamiliarFollowers] = useState([]);\n\n  const { id, locked } = info;\n  const accountID = useRef(id);\n\n  const {\n    following,\n    showingReblogs,\n    notifying,\n    followedBy,\n    blocking,\n    blockedBy,\n    muting,\n    mutingNotifications,\n    requested,\n    domainBlocking,\n    endorsed,\n  } = relationship || {};\n\n  useEffect(() => {\n    if (info) {\n      const currentAccount = store.session.get('currentAccount');\n      let currentID;\n      (async () => {\n        if (sameInstance && authenticated) {\n          currentID = id;\n        } else if (!sameInstance && currentAuthenticated) {\n          // Grab this account from my logged-in instance\n          const acctHasInstance = info.acct.includes('@');\n          try {\n            const results = await currentMasto.v2.search({\n              q: acctHasInstance ? info.acct : `${info.username}@${instance}`,\n              type: 'accounts',\n              limit: 1,\n              resolve: true,\n            });\n            console.log('🥏 Fetched account from logged-in instance', results);\n            currentID = results.accounts[0].id;\n          } catch (e) {\n            console.error(e);\n          }\n        }\n\n        if (!currentID) return;\n\n        if (currentAccount === currentID) {\n          // It's myself!\n          return;\n        }\n\n        accountID.current = currentID;\n\n        setRelationshipUIState('loading');\n        setFamiliarFollowers([]);\n\n        const fetchRelationships = currentMasto.v1.accounts.fetchRelationships([\n          currentID,\n        ]);\n        const fetchFamiliarFollowers =\n          currentMasto.v1.accounts.fetchFamiliarFollowers(currentID);\n\n        try {\n          const relationships = await fetchRelationships;\n          console.log('fetched relationship', relationships);\n          if (relationships.length) {\n            const relationship = relationships[0];\n            setRelationship(relationship);\n\n            if (!relationship.following) {\n              try {\n                const followers = await fetchFamiliarFollowers;\n                console.log('fetched familiar followers', followers);\n                setFamiliarFollowers(followers[0].accounts.slice(0, 10));\n              } catch (e) {\n                console.error(e);\n              }\n            }\n          }\n          setRelationshipUIState('default');\n        } catch (e) {\n          console.error(e);\n          setRelationshipUIState('error');\n        }\n      })();\n    }\n  }, [info, authenticated]);\n\n  return (\n    <>\n      {familiarFollowers?.length > 0 && (\n        <p class=\"common-followers\">\n          Common followers{' '}\n          <span class=\"ib\">\n            {familiarFollowers.map((follower) => (\n              <a\n                href={follower.url}\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = {\n                    account: follower,\n                    instance,\n                  };\n                }}\n              >\n                <Avatar\n                  url={follower.avatarStatic}\n                  size=\"l\"\n                  alt={`${follower.displayName} @${follower.acct}`}\n                />\n              </a>\n            ))}\n          </span>\n        </p>\n      )}\n      <p class=\"actions\">\n        {followedBy ? <span class=\"tag\">Following you</span> : <span />}{' '}\n        {relationshipUIState !== 'loading' && relationship && (\n          <button\n            type=\"button\"\n            class={`${following || requested ? 'light swap' : ''}`}\n            data-swap-state={following || requested ? 'danger' : ''}\n            disabled={relationshipUIState === 'loading'}\n            onClick={() => {\n              setRelationshipUIState('loading');\n\n              (async () => {\n                try {\n                  let newRelationship;\n\n                  if (following || requested) {\n                    const yes = confirm(\n                      requested\n                        ? 'Withdraw follow request?'\n                        : `Unfollow @${info.acct || info.username}?`,\n                    );\n\n                    if (yes) {\n                      newRelationship = await currentMasto.v1.accounts.unfollow(\n                        accountID.current,\n                      );\n                    }\n                  } else {\n                    newRelationship = await currentMasto.v1.accounts.follow(\n                      accountID.current,\n                    );\n                  }\n\n                  if (newRelationship) setRelationship(newRelationship);\n                  setRelationshipUIState('default');\n                } catch (e) {\n                  alert(e);\n                  setRelationshipUIState('error');\n                }\n              })();\n            }}\n          >\n            {following ? (\n              <>\n                <span>Following</span>\n                <span>Unfollow…</span>\n              </>\n            ) : requested ? (\n              <>\n                <span>Requested</span>\n                <span>Withdraw…</span>\n              </>\n            ) : locked ? (\n              <>\n                <Icon icon=\"lock\" /> <span>Follow</span>\n              </>\n            ) : (\n              'Follow'\n            )}\n          </button>\n        )}\n      </p>\n    </>\n  );\n}\n\nexport default Account;\n","import './drafts.css';\n\nimport { useEffect, useMemo, useReducer, useState } from 'react';\n\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport states from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Icon from './icon';\nimport Loader from './loader';\n\nfunction Drafts() {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [drafts, setDrafts] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const keys = await db.drafts.keys();\n        if (keys.length) {\n          const ns = getCurrentAccountNS();\n          const ownKeys = keys.filter((key) => key.startsWith(ns));\n          if (ownKeys.length) {\n            const drafts = await db.drafts.getMany(ownKeys);\n            drafts.sort(\n              (a, b) =>\n                new Date(b.updatedAt).getTime() -\n                new Date(a.updatedAt).getTime(),\n            );\n            setDrafts(drafts);\n          } else {\n            setDrafts([]);\n          }\n        } else {\n          setDrafts([]);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const hasDrafts = drafts?.length > 0;\n\n  return (\n    <div class=\"sheet\">\n      <header>\n        <h2>\n          Unsent drafts <Loader abrupt hidden={uiState !== 'loading'} />\n        </h2>\n        {hasDrafts && (\n          <div class=\"insignificant\">\n            Looks like you have unsent drafts. Let's continue where you left\n            off.\n          </div>\n        )}\n      </header>\n      <main>\n        {hasDrafts ? (\n          <>\n            <ul class=\"drafts-list\">\n              {drafts.map((draft) => {\n                const { updatedAt, key, draftStatus, replyTo } = draft;\n                const currentYear = new Date().getFullYear();\n                const updatedAtDate = new Date(updatedAt);\n                return (\n                  <li key={updatedAt}>\n                    <div class=\"mini-draft-meta\">\n                      <b>\n                        <Icon icon={replyTo ? 'reply' : 'quill'} size=\"s\" />{' '}\n                        <time>\n                          {!!replyTo && (\n                            <>\n                              @{replyTo.account.acct}\n                              <br />\n                            </>\n                          )}\n                          {Intl.DateTimeFormat('en', {\n                            // Show year if not current year\n                            year:\n                              updatedAtDate.getFullYear() === currentYear\n                                ? undefined\n                                : 'numeric',\n                            month: 'short',\n                            day: 'numeric',\n                            weekday: 'short',\n                            hour: 'numeric',\n                            minute: '2-digit',\n                            second: '2-digit',\n                          }).format(updatedAtDate)}\n                        </time>\n                      </b>\n                      <button\n                        type=\"button\"\n                        class=\"small light\"\n                        disabled={uiState === 'loading'}\n                        onClick={() => {\n                          (async () => {\n                            try {\n                              const yes = confirm('Delete this draft?');\n                              if (yes) {\n                                await db.drafts.del(key);\n                                reload();\n                              }\n                            } catch (e) {\n                              alert('Error deleting draft! Please try again.');\n                            }\n                          })();\n                        }}\n                      >\n                        Delete&hellip;\n                      </button>\n                    </div>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      class=\"draft-item\"\n                      onClick={async () => {\n                        // console.log({ draftStatus });\n                        let replyToStatus;\n                        if (replyTo) {\n                          setUIState('loading');\n                          try {\n                            replyToStatus = await masto.v1.statuses.fetch(\n                              replyTo.id,\n                            );\n                          } catch (e) {\n                            console.error(e);\n                            alert('Error fetching reply-to status!');\n                            setUIState('default');\n                            return;\n                          }\n                          setUIState('default');\n                        }\n                        window.__COMPOSE__ = {\n                          draftStatus,\n                          replyToStatus,\n                        };\n                        states.showCompose = true;\n                        states.showDrafts = false;\n                      }}\n                    >\n                      <MiniDraft draft={draft} />\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n            <p>\n              <button\n                type=\"button\"\n                class=\"light danger\"\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  (async () => {\n                    const yes = confirm('Delete all drafts?');\n                    if (yes) {\n                      setUIState('loading');\n                      try {\n                        await db.drafts.delMany(\n                          drafts.map((draft) => draft.key),\n                        );\n                        setUIState('default');\n                        reload();\n                      } catch (e) {\n                        console.error(e);\n                        alert('Error deleting drafts! Please try again.');\n                        setUIState('error');\n                      }\n                    }\n                  })();\n                }}\n              >\n                Delete all drafts&hellip;\n              </button>\n            </p>\n          </>\n        ) : (\n          <p>No drafts found.</p>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction MiniDraft({ draft }) {\n  const { draftStatus, replyTo } = draft;\n  const { status, spoilerText, poll, mediaAttachments } = draftStatus;\n  const hasPoll = poll?.options?.length > 0;\n  const hasMedia = mediaAttachments?.length > 0;\n  const hasPollOrMedia = hasPoll || hasMedia;\n  const firstImageMedia = useMemo(() => {\n    if (!hasMedia) return;\n    const image = mediaAttachments.find((media) => /image/.test(media.type));\n    if (!image) return;\n    const { file } = image;\n    const objectURL = URL.createObjectURL(file);\n    return objectURL;\n  }, [hasMedia, mediaAttachments]);\n  return (\n    <>\n      <div class=\"mini-draft\">\n        {hasPollOrMedia && (\n          <div\n            class={`mini-draft-aside ${firstImageMedia ? 'has-image' : ''}`}\n            style={\n              firstImageMedia\n                ? {\n                    '--bg-image': `url(${firstImageMedia})`,\n                  }\n                : {}\n            }\n          >\n            {hasPoll && <Icon icon=\"poll\" />}\n            {hasMedia && (\n              <span>\n                <Icon icon=\"attachment\" />{' '}\n                <small>{mediaAttachments?.length}</small>\n              </span>\n            )}\n          </div>\n        )}\n        <div class=\"mini-draft-main\">\n          {!!spoilerText && <div class=\"mini-draft-spoiler\">{spoilerText}</div>}\n          {!!status && <div class=\"mini-draft-status\">{status}</div>}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Drafts;\n","import { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Media from './media';\nimport Modal from './modal';\n\nfunction MediaModal({\n  mediaAttachments,\n  statusID,\n  instance,\n  index = 0,\n  onClose = () => {},\n}) {\n  const carouselRef = useRef(null);\n\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const carouselFocusItem = useRef(null);\n  useLayoutEffect(() => {\n    carouselFocusItem.current?.scrollIntoView();\n  }, []);\n  const prevStatusID = useRef(statusID);\n  useEffect(() => {\n    const scrollLeft = index * carouselRef.current.clientWidth;\n    const differentStatusID = prevStatusID.current !== statusID;\n    if (differentStatusID) prevStatusID.current = statusID;\n    carouselRef.current.scrollTo({\n      left: scrollLeft,\n      behavior: differentStatusID ? 'auto' : 'smooth',\n    });\n  }, [index, statusID]);\n\n  const [showControls, setShowControls] = useState(true);\n\n  useEffect(() => {\n    let handleSwipe = () => {\n      onClose();\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('swiped-down', handleSwipe);\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('swiped-down', handleSwipe);\n      }\n    };\n  }, []);\n\n  useHotkeys('esc', onClose, [onClose]);\n\n  const [showMediaAlt, setShowMediaAlt] = useState(false);\n\n  useEffect(() => {\n    let handleScroll = () => {\n      const { clientWidth, scrollLeft } = carouselRef.current;\n      const index = Math.round(scrollLeft / clientWidth);\n      setCurrentIndex(index);\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('scroll', handleScroll, {\n        passive: true,\n      });\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, []);\n\n  return (\n    <>\n      <div\n        ref={carouselRef}\n        tabIndex=\"-1\"\n        data-swipe-threshold=\"44\"\n        class=\"carousel\"\n        onClick={(e) => {\n          if (\n            e.target.classList.contains('carousel-item') ||\n            e.target.classList.contains('media')\n          ) {\n            onClose();\n          }\n        }}\n      >\n        {mediaAttachments?.map((media, i) => {\n          const { blurhash } = media;\n          const rgbAverageColor = blurhash\n            ? getBlurHashAverageColor(blurhash)\n            : null;\n          return (\n            <div\n              class=\"carousel-item\"\n              style={{\n                '--average-color': `rgb(${rgbAverageColor?.join(',')})`,\n                '--average-color-alpha': `rgba(${rgbAverageColor?.join(\n                  ',',\n                )}, .5)`,\n              }}\n              tabindex=\"0\"\n              key={media.id}\n              ref={i === currentIndex ? carouselFocusItem : null}\n              onClick={(e) => {\n                if (e.target !== e.currentTarget) {\n                  setShowControls(!showControls);\n                }\n              }}\n            >\n              {!!media.description && (\n                <button\n                  type=\"button\"\n                  class=\"plain2 media-alt\"\n                  hidden={!showControls}\n                  onClick={() => {\n                    setShowMediaAlt(media.description);\n                  }}\n                >\n                  <Icon icon=\"info\" />\n                  <span class=\"media-alt-desc\">{media.description}</span>\n                </button>\n              )}\n              <Media media={media} showOriginal />\n            </div>\n          );\n        })}\n      </div>\n      <div class=\"carousel-top-controls\" hidden={!showControls}>\n        <span>\n          <button\n            type=\"button\"\n            class=\"carousel-button plain3\"\n            onClick={() => onClose()}\n          >\n            <Icon icon=\"x\" />\n          </button>\n        </span>\n        {mediaAttachments?.length > 1 ? (\n          <span class=\"carousel-dots\">\n            {mediaAttachments?.map((media, i) => (\n              <button\n                key={media.id}\n                type=\"button\"\n                disabled={i === currentIndex}\n                class={`plain carousel-dot ${\n                  i === currentIndex ? 'active' : ''\n                }`}\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  carouselRef.current.scrollTo({\n                    left: carouselRef.current.clientWidth * i,\n                    behavior: 'smooth',\n                  });\n                }}\n              >\n                &bull;\n              </button>\n            ))}\n          </span>\n        ) : (\n          <span />\n        )}\n        <span>\n          <Link\n            to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\n            class=\"button carousel-button media-post-link plain3\"\n            onClick={() => {\n              // if small screen (not media query min-width 40em + 350px), run onClose\n              if (\n                !window.matchMedia('(min-width: calc(40em + 350px))').matches\n              ) {\n                onClose();\n              }\n            }}\n          >\n            <span class=\"button-label\">See post </span>&raquo;\n          </Link>{' '}\n          <a\n            href={\n              mediaAttachments[currentIndex]?.remoteUrl ||\n              mediaAttachments[currentIndex]?.url\n            }\n            target=\"_blank\"\n            class=\"button carousel-button plain3\"\n            title=\"Open original media in new window\"\n          >\n            <Icon icon=\"popout\" alt=\"Open original media in new window\" />\n          </a>{' '}\n        </span>\n      </div>\n      {mediaAttachments?.length > 1 && (\n        <div class=\"carousel-controls\" hidden={!showControls}>\n          <button\n            type=\"button\"\n            class=\"carousel-button plain3\"\n            hidden={currentIndex === 0}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex - 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-left\" />\n          </button>\n          <button\n            type=\"button\"\n            class=\"carousel-button plain3\"\n            hidden={currentIndex === mediaAttachments.length - 1}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex + 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-right\" />\n          </button>\n        </div>\n      )}\n      {!!showMediaAlt && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowMediaAlt(false);\n            }\n          }}\n        >\n          <div class=\"sheet\">\n            <header>\n              <h2>Media description</h2>\n            </header>\n            <main>\n              <p\n                style={{\n                  whiteSpace: 'pre-wrap',\n                }}\n              >\n                {showMediaAlt}\n              </p>\n            </main>\n          </div>\n        </Modal>\n      )}\n      {!!showMediaAlt && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowMediaAlt(false);\n            }\n          }}\n        >\n          <div class=\"sheet\">\n            <header>\n              <h2>Media description</h2>\n            </header>\n            <main>\n              <p\n                style={{\n                  whiteSpace: 'pre-wrap',\n                }}\n              >\n                {showMediaAlt}\n              </p>\n            </main>\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n}\n\nexport default MediaModal;\n","import { useEffect, useState } from 'preact/hooks';\n\nfunction AsyncText({ children }) {\n  if (typeof children === 'string') return children;\n  const [text, setText] = useState('');\n  useEffect(() => {\n    Promise.resolve(children).then(setText);\n  }, [children]);\n  return text;\n}\n\nexport default AsyncText;\n","import './shortcuts-settings.css';\n\nimport mem from 'mem';\nimport { useEffect, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\n\nconst SHORTCUTS_LIMIT = 9;\n\nconst TYPES = [\n  'following',\n  'notifications',\n  'list',\n  'public',\n  // NOTE: Hide for now\n  // 'search', // Search on Mastodon ain't great\n  // 'account-statuses', // Need @acct search first\n  'bookmarks',\n  'favourites',\n  'hashtag',\n];\nconst TYPE_TEXT = {\n  following: 'Home / Following',\n  notifications: 'Notifications',\n  list: 'List',\n  public: 'Public',\n  search: 'Search',\n  'account-statuses': 'Account',\n  bookmarks: 'Bookmarks',\n  favourites: 'Favourites',\n  hashtag: 'Hashtag',\n};\nconst TYPE_PARAMS = {\n  list: [\n    {\n      text: 'List ID',\n      name: 'id',\n    },\n  ],\n  public: [\n    {\n      text: 'Local only',\n      name: 'local',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'e.g. mastodon.social',\n    },\n  ],\n  search: [\n    {\n      text: 'Search term',\n      name: 'query',\n      type: 'text',\n    },\n  ],\n  'account-statuses': [\n    {\n      text: '@',\n      name: 'id',\n      type: 'text',\n      placeholder: 'cheeaun@mastodon.social',\n    },\n  ],\n  hashtag: [\n    {\n      text: '#',\n      name: 'hashtag',\n      type: 'text',\n      placeholder: 'e.g. PixelArt (Max 5, space-separated)',\n      pattern: '[^#]+',\n    },\n  ],\n};\nexport const SHORTCUTS_META = {\n  following: {\n    id: 'home',\n    title: (_, index) => (index === 0 ? 'Home' : 'Following'),\n    path: '/',\n    icon: 'home',\n  },\n  notifications: {\n    id: 'notifications',\n    title: 'Notifications',\n    path: '/notifications',\n    icon: 'notification',\n  },\n  list: {\n    id: 'list',\n    title: mem(\n      async ({ id }) => {\n        const list = await api().masto.v1.lists.fetch(id);\n        return list.title;\n      },\n      {\n        cacheKey: ([{ id }]) => id,\n      },\n    ),\n    path: ({ id }) => `/l/${id}`,\n    icon: 'list',\n  },\n  public: {\n    id: 'public',\n    title: ({ local, instance }) =>\n      `${local ? 'Local' : 'Federated'} (${instance})`,\n    path: ({ local, instance }) => `/${instance}/p${local ? '/l' : ''}`,\n    icon: ({ local }) => (local ? 'group' : 'earth'),\n  },\n  search: {\n    id: 'search',\n    title: ({ query }) => query,\n    path: ({ query }) => `/search?q=${query}`,\n    icon: 'search',\n  },\n  'account-statuses': {\n    id: 'account-statuses',\n    title: mem(\n      async ({ id }) => {\n        const account = await api().masto.v1.accounts.fetch(id);\n        return account.username || account.acct || account.displayName;\n      },\n      {\n        cacheKey: ([{ id }]) => id,\n      },\n    ),\n    path: ({ id }) => `/a/${id}`,\n    icon: 'user',\n  },\n  bookmarks: {\n    id: 'bookmarks',\n    title: 'Bookmarks',\n    path: '/b',\n    icon: 'bookmark',\n  },\n  favourites: {\n    id: 'favourites',\n    title: 'Favourites',\n    path: '/f',\n    icon: 'heart',\n  },\n  hashtag: {\n    id: 'hashtag',\n    title: ({ hashtag }) => hashtag,\n    path: ({ hashtag }) => `/t/${hashtag.split(/\\s+/).join('+')}`,\n    icon: 'hashtag',\n  },\n};\n\nfunction ShortcutsSettings() {\n  const snapStates = useSnapshot(states);\n  const { masto } = api();\n  const { shortcuts } = snapStates;\n\n  const [lists, setLists] = useState([]);\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        setLists(lists);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n\n    (async () => {\n      try {\n        const iterator = masto.v1.followedTags.list();\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        setFollowedHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"shortcuts-settings-container\" class=\"sheet\" tabindex=\"-1\">\n      <header>\n        <h2>\n          <Icon icon=\"shortcut\" /> Shortcuts{' '}\n          <sup\n            style={{\n              fontSize: 12,\n              opacity: 0.5,\n              textTransform: 'uppercase',\n            }}\n          >\n            beta\n          </sup>\n        </h2>\n      </header>\n      <main>\n        <p>\n          Specify a list of shortcuts that'll appear in the floating Shortcuts\n          button.\n        </p>\n        <p>\n          <label>\n            View mode{' '}\n            <select\n              value={snapStates.settings.shortcutsViewMode || 'float-button'}\n              onChange={(e) => {\n                states.settings.shortcutsViewMode = e.target.value;\n              }}\n            >\n              <option value=\"float-button\">Floating button</option>\n              <option value=\"multi-column\">Multi-column</option>\n              <option value=\"tab-menu-bar\">Tab/Menu bar </option>\n            </select>\n          </label>\n        </p>\n        {/* <p>\n          <details>\n            <summary class=\"insignificant\">\n              Experimental Multi-column mode\n            </summary>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={snapStates.settings.shortcutsColumnsMode}\n                onChange={(e) => {\n                  states.settings.shortcutsColumnsMode = e.target.checked;\n                }}\n              />{' '}\n              Show shortcuts in multiple columns instead of the floating button.\n            </label>\n          </details>\n        </p> */}\n        {shortcuts.length > 0 ? (\n          <ol class=\"shortcuts-list\">\n            {shortcuts.map((shortcut, i) => {\n              const key = i + Object.values(shortcut);\n              const { type } = shortcut;\n              if (!SHORTCUTS_META[type]) return null;\n              let { icon, title } = SHORTCUTS_META[type];\n              if (typeof title === 'function') {\n                title = title(shortcut);\n              }\n              if (typeof icon === 'function') {\n                icon = icon(shortcut);\n              }\n              return (\n                <li key={key}>\n                  <Icon icon={icon} />\n                  <span class=\"shortcut-text\">\n                    <AsyncText>{title}</AsyncText>\n                  </span>\n                  <span class=\"shortcut-actions\">\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === 0}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i > 0) {\n                          const temp = states.shortcuts[i - 1];\n                          shortcutsArr[i - 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-up\" alt=\"Move up\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === shortcuts.length - 1}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i < states.shortcuts.length - 1) {\n                          const temp = states.shortcuts[i + 1];\n                          shortcutsArr[i + 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-down\" alt=\"Move down\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        states.shortcuts.splice(i, 1);\n                      }}\n                    >\n                      <Icon icon=\"x\" alt=\"Remove\" />\n                    </button>\n                  </span>\n                </li>\n              );\n            })}\n          </ol>\n        ) : (\n          <p class=\"ui-state insignificant\">\n            No shortcuts yet. Add one from the form below.\n          </p>\n        )}\n        <hr />\n        <ShortcutForm\n          disabled={shortcuts.length >= SHORTCUTS_LIMIT}\n          lists={lists}\n          followedHashtags={followedHashtags}\n          onSubmit={(data) => {\n            console.log('onSubmit', data);\n            states.shortcuts.push(data);\n          }}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default ShortcutsSettings;\nfunction ShortcutForm({ type, lists, followedHashtags, onSubmit, disabled }) {\n  const [currentType, setCurrentType] = useState(type);\n  return (\n    <>\n      <form\n        onSubmit={(e) => {\n          // Construct a nice object from form\n          e.preventDefault();\n          const data = new FormData(e.target);\n          const result = {};\n          data.forEach((value, key) => {\n            result[key] = value?.trim();\n          });\n          if (!result.type) return;\n          onSubmit(result);\n          // Reset\n          e.target.reset();\n          setCurrentType(null);\n        }}\n      >\n        <header>\n          <h3>Add a shortcut</h3>\n          <button type=\"submit\" disabled={disabled}>\n            Add\n          </button>\n        </header>\n        <p>\n          <label>\n            <span>Timeline</span>\n            <select\n              required\n              disabled={disabled}\n              onChange={(e) => {\n                setCurrentType(e.target.value);\n              }}\n              name=\"type\"\n            >\n              <option></option>\n              {TYPES.map((type) => (\n                <option value={type}>{TYPE_TEXT[type]}</option>\n              ))}\n            </select>\n          </label>\n        </p>\n        {TYPE_PARAMS[currentType]?.map?.(\n          ({ text, name, type, placeholder, pattern }) => {\n            if (currentType === 'list') {\n              return (\n                <p>\n                  <label>\n                    <span>List</span>\n                    <select name=\"id\" required disabled={disabled}>\n                      {lists.map((list) => (\n                        <option value={list.id}>{list.title}</option>\n                      ))}\n                    </select>\n                  </label>\n                </p>\n              );\n            }\n\n            return (\n              <p>\n                <label>\n                  <span>{text}</span>{' '}\n                  <input\n                    type={type}\n                    name={name}\n                    placeholder={placeholder}\n                    required={type === 'text'}\n                    disabled={disabled}\n                    list={\n                      currentType === 'hashtag'\n                        ? 'followed-hashtags-datalist'\n                        : null\n                    }\n                    autocorrect=\"off\"\n                    autocapitalize=\"off\"\n                    spellcheck={false}\n                    pattern={pattern}\n                  />\n                  {currentType === 'hashtag' && followedHashtags.length > 0 && (\n                    <datalist id=\"followed-hashtags-datalist\">\n                      {followedHashtags.map((tag) => (\n                        <option value={tag.name} />\n                      ))}\n                    </datalist>\n                  )}\n                </label>\n              </p>\n            );\n          },\n        )}\n      </form>\n    </>\n  );\n}\n","import './shortcuts.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useMemo, useRef } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport { SHORTCUTS_META } from '../components/shortcuts-settings';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport Link from './link';\nimport MenuLink from './MenuLink';\n\nfunction Shortcuts() {\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  if (!shortcuts.length) {\n    return null;\n  }\n\n  const menuRef = useRef();\n\n  const formattedShortcuts = useMemo(\n    () =>\n      shortcuts\n        .map((pin, i) => {\n          const { type, ...data } = pin;\n          if (!SHORTCUTS_META[type]) return null;\n          let { id, path, title, icon } = SHORTCUTS_META[type];\n\n          if (typeof id === 'function') {\n            id = id(data);\n          }\n          if (typeof path === 'function') {\n            path = path(data, i);\n          }\n          if (typeof title === 'function') {\n            title = title(data);\n          }\n          if (typeof icon === 'function') {\n            icon = icon(data);\n          }\n\n          return {\n            id,\n            path,\n            title,\n            icon,\n          };\n        })\n        .filter(Boolean),\n    [shortcuts],\n  );\n\n  const navigate = useNavigate();\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    const index = parseInt(handler.keys[0], 10) - 1;\n    if (index < formattedShortcuts.length) {\n      const { path } = formattedShortcuts[index];\n      if (path) {\n        navigate(path);\n        menuRef.current?.closeMenu?.();\n      }\n    }\n  });\n\n  return (\n    <div id=\"shortcuts\">\n      {snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? (\n        <nav class=\"tab-bar\">\n          <ul>\n            {formattedShortcuts.map(({ id, path, title, icon }, i) => {\n              return (\n                <li key={i + title}>\n                  <Link\n                    to={path}\n                    onClick={(e) => {\n                      if (e.target.classList.contains('is-active')) {\n                        e.preventDefault();\n                        const page = document.getElementById(`${id}-page`);\n                        console.log(id, page);\n                        if (page) {\n                          page.scrollTop = 0;\n                          const updatesButton =\n                            page.querySelector('.updates-button');\n                          if (updatesButton) {\n                            updatesButton.click();\n                          }\n                        }\n                      }\n                    }}\n                  >\n                    <Icon icon={icon} size=\"xl\" alt={title} />\n                    <span>\n                      <AsyncText>{title}</AsyncText>\n                    </span>\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </nav>\n      ) : (\n        <Menu\n          instanceRef={menuRef}\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          boundingBoxPadding=\"8 8 8 8\"\n          menuClassName=\"glass-menu shortcuts-menu\"\n          offsetY={8}\n          position=\"anchor\"\n          menuButton={\n            <button\n              type=\"button\"\n              id=\"shortcuts-button\"\n              class=\"plain\"\n              onTransitionStart={(e) => {\n                // Close menu if the button disappears\n                try {\n                  const { target } = e;\n                  if (getComputedStyle(target).pointerEvents === 'none') {\n                    menuRef.current?.closeMenu?.();\n                  }\n                } catch (e) {}\n              }}\n            >\n              <Icon icon=\"shortcut\" size=\"xl\" alt=\"Shortcuts\" />\n            </button>\n          }\n        >\n          {formattedShortcuts.map(({ path, title, icon }, i) => {\n            return (\n              <MenuLink to={path} key={i + title} class=\"glass-menu-item\">\n                <Icon icon={icon} size=\"l\" />{' '}\n                <span class=\"menu-grow\">\n                  <AsyncText>{title}</AsyncText>\n                </span>\n                <span class=\"menu-shortcut hide-until-focus-visible\">\n                  {i + 1}\n                </span>\n              </MenuLink>\n            );\n          })}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default Shortcuts;\n","import { useEffect, useRef } from 'preact/hooks';\n\nexport default function usePageVisibility(fn = () => {}, deps = []) {\n  const savedCallback = useRef(fn, deps);\n\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const hidden = document.hidden || document.visibilityState === 'hidden';\n      console.log('👀 Page visibility changed', hidden ? 'hidden' : 'visible');\n      savedCallback.current(!hidden);\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () =>\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n}\n","import { useEffect, useState } from 'preact/hooks';\n\nexport default function useScroll({\n  scrollableElement,\n  distanceFromStart = 1, // ratio of clientHeight/clientWidth\n  distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n  scrollThresholdStart = 10,\n  scrollThresholdEnd = 10,\n  direction = 'vertical',\n  distanceFromStartPx: _distanceFromStartPx,\n  distanceFromEndPx: _distanceFromEndPx,\n} = {}) {\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [reachStart, setReachStart] = useState(false);\n  const [reachEnd, setReachEnd] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n\n  if (!scrollableElement) {\n    // Better be explicit instead of auto-assign to window\n    return {};\n  }\n\n  useEffect(() => {\n    let previousScrollStart = isVertical\n      ? scrollableElement.scrollTop\n      : scrollableElement.scrollLeft;\n\n    function onScroll() {\n      const {\n        scrollTop,\n        scrollLeft,\n        scrollHeight,\n        scrollWidth,\n        clientHeight,\n        clientWidth,\n      } = scrollableElement;\n      const scrollStart = isVertical ? scrollTop : scrollLeft;\n      const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n      const clientDimension = isVertical ? clientHeight : clientWidth;\n      const scrollDistance = Math.abs(scrollStart - previousScrollStart);\n      const distanceFromStartPx =\n        _distanceFromStartPx ||\n        Math.min(\n          clientDimension * distanceFromStart,\n          scrollDimension,\n          scrollStart,\n        );\n      const distanceFromEndPx =\n        _distanceFromEndPx ||\n        Math.min(\n          clientDimension * distanceFromEnd,\n          scrollDimension,\n          scrollDimension - scrollStart - clientDimension,\n        );\n\n      if (\n        scrollDistance >=\n        (previousScrollStart < scrollStart\n          ? scrollThresholdEnd\n          : scrollThresholdStart)\n      ) {\n        setScrollDirection(previousScrollStart < scrollStart ? 'end' : 'start');\n        previousScrollStart = scrollStart;\n      }\n\n      setReachStart(scrollStart <= 0);\n      setReachEnd(scrollStart + clientDimension >= scrollDimension);\n      setNearReachStart(scrollStart <= distanceFromStartPx);\n      setNearReachEnd(\n        scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n      );\n    }\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    scrollableElement,\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n  ]);\n\n  return {\n    scrollDirection,\n    reachStart,\n    reachEnd,\n    nearReachStart,\n    nearReachEnd,\n    init: () => {\n      if (scrollableElement) {\n        scrollableElement.dispatchEvent(new Event('scroll'));\n      }\n    },\n  };\n}\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport MenuLink from './MenuLink';\n\nfunction NavMenu(props) {\n  const snapStates = useSnapshot(states);\n  const { instance, authenticated } = api();\n\n  // Home = Following\n  // But when in multi-column mode, Home becomes columns of anything\n  // User may choose pin or not to pin Following\n  // If user doesn't pin Following, we show it in the menu\n  const showFollowing =\n    snapStates.settings.shortcutsColumnsMode &&\n    !snapStates.shortcuts.find((pin) => pin.type === 'following');\n\n  return (\n    <Menu\n      portal={{\n        target: document.body,\n      }}\n      {...props}\n      overflow=\"auto\"\n      viewScroll=\"close\"\n      boundingBoxPadding=\"8 8 8 8\"\n      menuButton={\n        <button type=\"button\" class=\"button plain\">\n          <Icon icon=\"menu\" size=\"l\" />\n        </button>\n      }\n    >\n      <MenuLink to=\"/\">\n        <Icon icon=\"home\" size=\"l\" /> <span>Home</span>\n      </MenuLink>\n      {authenticated && (\n        <>\n          {showFollowing && (\n            <MenuLink to=\"/following\">\n              <Icon icon=\"following\" size=\"l\" /> <span>Following</span>\n            </MenuLink>\n          )}\n          <MenuLink to=\"/notifications\">\n            <Icon icon=\"notification\" size=\"l\" /> <span>Notifications</span>\n            {snapStates.notificationsShowNew && (\n              <sup title=\"New\" style={{ opacity: 0.5 }}>\n                {' '}\n                &bull;\n              </sup>\n            )}\n          </MenuLink>\n          <MenuDivider />\n          <MenuLink to=\"/l\">\n            <Icon icon=\"list\" size=\"l\" /> <span>Lists</span>\n          </MenuLink>\n          <MenuLink to=\"/ft\">\n            <Icon icon=\"hashtag\" size=\"l\" /> <span>Followed Hashtags</span>\n          </MenuLink>\n          <MenuLink to=\"/b\">\n            <Icon icon=\"bookmark\" size=\"l\" /> <span>Bookmarks</span>\n          </MenuLink>\n          <MenuLink to=\"/f\">\n            <Icon icon=\"heart\" size=\"l\" /> <span>Favourites</span>\n          </MenuLink>\n        </>\n      )}\n      <MenuDivider />\n      <MenuLink to={`/search`}>\n        <Icon icon=\"search\" size=\"l\" /> <span>Search</span>\n      </MenuLink>\n      <MenuLink to={`/${instance}/p/l`}>\n        <Icon icon=\"group\" size=\"l\" /> <span>Local</span>\n      </MenuLink>\n      <MenuLink to={`/${instance}/p`}>\n        <Icon icon=\"earth\" size=\"l\" /> <span>Federated</span>\n      </MenuLink>\n      {authenticated && (\n        <>\n          <MenuDivider />\n          <MenuItem\n            onClick={() => {\n              states.showShortcutsSettings = true;\n            }}\n          >\n            <Icon icon=\"shortcut\" size=\"l\" />{' '}\n            <span>Shortcuts Settings&hellip;</span>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              states.showSettings = true;\n            }}\n          >\n            <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n          </MenuItem>\n        </>\n      )}\n    </Menu>\n  );\n}\n\nexport default NavMenu;\n","import { useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Loader from './loader';\nimport Menu from './menu';\nimport Status from './status';\n\nfunction Timeline({\n  title,\n  titleComponent,\n  id,\n  instance,\n  emptyText,\n  errorText,\n  useItemID, // use statusID instead of status object, assuming it's already in states\n  boostsCarousel,\n  fetchItems = () => {},\n  checkForUpdates = () => {},\n  checkForUpdatesInterval = 60_000, // 1 minute\n  headerStart,\n  headerEnd,\n}) {\n  const [items, setItems] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n  const [showNew, setShowNew] = useState(false);\n  const [visible, setVisible] = useState(true);\n  const scrollableRef = useRef();\n\n  const loadItems = useDebouncedCallback(\n    (firstLoad) => {\n      setShowNew(false);\n      if (uiState === 'loading') return;\n      setUIState('loading');\n      (async () => {\n        try {\n          let { done, value } = await fetchItems(firstLoad);\n          if (value?.length) {\n            if (boostsCarousel) {\n              value = groupBoosts(value);\n            }\n            console.log(value);\n            if (firstLoad) {\n              setItems(value);\n            } else {\n              setItems((items) => [...items, ...value]);\n            }\n            setShowMore(!done);\n          } else {\n            setShowMore(false);\n          }\n          setUIState('default');\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n        } finally {\n          loadItems.cancel();\n        }\n      })();\n    },\n    1500,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  const itemsSelector = '.timeline-item, .timeline-item-alt';\n\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\n    // focus on next status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (handler.shift) {\n        // get next status that's not .timeline-item-alt\n        nextItem = allItems.find(\n          (item, index) =>\n            index > activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoViewIfNeeded?.();\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoViewIfNeeded?.();\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (handler.shift) {\n        // get prev status that's not .timeline-item-alt\n        prevItem = allItems.findLast(\n          (item, index) =>\n            index < activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoViewIfNeeded?.();\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoViewIfNeeded?.();\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    // open active status\n    const activeItem = document.activeElement.closest(itemsSelector);\n    if (activeItem) {\n      activeItem.click();\n    }\n  });\n\n  const {\n    scrollDirection,\n    nearReachStart,\n    nearReachEnd,\n    reachStart,\n    reachEnd,\n  } = useScroll({\n    scrollableElement: scrollableRef.current,\n    distanceFromEnd: 2,\n    scrollThresholdStart: 44,\n  });\n\n  useEffect(() => {\n    scrollableRef.current?.scrollTo({ top: 0 });\n    loadItems(true);\n  }, []);\n\n  useEffect(() => {\n    if (reachStart) {\n      loadItems(true);\n    }\n  }, [reachStart]);\n\n  useEffect(() => {\n    if (nearReachEnd || (reachEnd && showMore)) {\n      loadItems();\n    }\n  }, [nearReachEnd, showMore]);\n\n  const lastHiddenTime = useRef();\n  usePageVisibility((visible) => {\n    if (visible) {\n      const timeDiff = Date.now() - lastHiddenTime.current;\n      if (!lastHiddenTime.current || timeDiff > 1000 * 60) {\n        (async () => {\n          console.log('✨ Check updates');\n          const hasUpdate = await checkForUpdates();\n          if (hasUpdate) {\n            console.log('✨ Has new updates');\n            setShowNew(true);\n          }\n        })();\n      }\n    } else {\n      lastHiddenTime.current = Date.now();\n    }\n    setVisible(visible);\n  }, []);\n\n  // checkForUpdates interval\n  useInterval(\n    () => {\n      (async () => {\n        console.log('✨ Check updates');\n        const hasUpdate = await checkForUpdates();\n        if (hasUpdate) {\n          console.log('✨ Has new updates');\n          setShowNew(true);\n        }\n      })();\n    },\n    visible && !showNew ? checkForUpdatesInterval : null,\n  );\n\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n\n  return (\n    <div\n      id={`${id}-page`}\n      class=\"deck-container\"\n      ref={(node) => {\n        scrollableRef.current = node;\n        jRef.current = node;\n        kRef.current = node;\n        oRef.current = node;\n      }}\n      tabIndex=\"-1\"\n    >\n      <div class=\"timeline-deck deck\">\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({\n                top: 0,\n                behavior: 'smooth',\n              });\n            }\n          }}\n          onDblClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              loadItems(true);\n            }\n          }}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <Menu />\n              {headerStart !== null && headerStart !== undefined ? (\n                headerStart\n              ) : (\n                <Link to=\"/\" class=\"button plain home-button\">\n                  <Icon icon=\"home\" size=\"l\" />\n                </Link>\n              )}\n            </div>\n            {title && (titleComponent ? titleComponent : <h1>{title}</h1>)}\n            <div class=\"header-side\">\n              <Loader hidden={uiState !== 'loading'} />\n              {!!headerEnd && headerEnd}\n            </div>\n          </div>\n          {items.length > 0 &&\n            uiState !== 'loading' &&\n            !hiddenUI &&\n            showNew && (\n              <button\n                class=\"updates-button shiny-pill\"\n                type=\"button\"\n                onClick={() => {\n                  loadItems(true);\n                  scrollableRef.current?.scrollTo({\n                    top: 0,\n                    behavior: 'smooth',\n                  });\n                }}\n              >\n                <Icon icon=\"arrow-up\" /> New posts\n              </button>\n            )}\n        </header>\n        {!!items.length ? (\n          <>\n            <ul class=\"timeline\">\n              {items.map((status) => {\n                const { id: statusID, reblog, items, type } = status;\n                const actualStatusID = reblog?.id || statusID;\n                const url = instance\n                  ? `/${instance}/s/${actualStatusID}`\n                  : `/s/${actualStatusID}`;\n                let title = '';\n                if (type === 'boosts') {\n                  title = `${items.length} Boosts`;\n                } else if (type === 'pinned') {\n                  title = 'Pinned posts';\n                }\n                if (items) {\n                  return (\n                    <li key={`timeline-${statusID}`}>\n                      <StatusCarousel title={title} class={`${type}-carousel`}>\n                        {items.map((item) => {\n                          const { id: statusID, reblog } = item;\n                          const actualStatusID = reblog?.id || statusID;\n                          const url = instance\n                            ? `/${instance}/s/${actualStatusID}`\n                            : `/s/${actualStatusID}`;\n                          return (\n                            <li key={statusID}>\n                              <Link\n                                class=\"status-carousel-link timeline-item-alt\"\n                                to={url}\n                              >\n                                {useItemID ? (\n                                  <Status\n                                    statusID={statusID}\n                                    instance={instance}\n                                    size=\"s\"\n                                    contentTextWeight\n                                  />\n                                ) : (\n                                  <Status\n                                    status={item}\n                                    instance={instance}\n                                    size=\"s\"\n                                    contentTextWeight\n                                  />\n                                )}\n                              </Link>\n                            </li>\n                          );\n                        })}\n                      </StatusCarousel>\n                    </li>\n                  );\n                }\n                return (\n                  <li key={`timeline-${statusID}`}>\n                    <Link class=\"status-link timeline-item\" to={url}>\n                      {useItemID ? (\n                        <Status statusID={statusID} instance={instance} />\n                      ) : (\n                        <Status status={status} instance={instance} />\n                      )}\n                    </Link>\n                  </li>\n                );\n              })}\n              {showMore && uiState === 'loading' && (\n                <>\n                  <li\n                    style={{\n                      height: '20vh',\n                    }}\n                  >\n                    <Status skeleton />\n                  </li>\n                  <li\n                    style={{\n                      height: '25vh',\n                    }}\n                  >\n                    <Status skeleton />\n                  </li>\n                </>\n              )}\n            </ul>\n            {uiState === 'default' &&\n              (showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadItems();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadItems()}\n                    style={{ marginBlockEnd: '6em' }}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <ul class=\"timeline\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <li key={i}>\n                <Status skeleton />\n              </li>\n            ))}\n          </ul>\n        ) : (\n          uiState !== 'error' && <p class=\"ui-state\">{emptyText}</p>\n        )}\n        {uiState === 'error' && (\n          <p class=\"ui-state\">\n            {errorText}\n            <br />\n            <br />\n            <button\n              class=\"button plain\"\n              onClick={() => loadItems(!items.length)}\n            >\n              Try again\n            </button>\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction groupBoosts(values) {\n  let newValues = [];\n  let boostStash = [];\n  let serialBoosts = 0;\n  for (let i = 0; i < values.length; i++) {\n    const item = values[i];\n    if (item.reblog) {\n      boostStash.push(item);\n      serialBoosts++;\n    } else {\n      newValues.push(item);\n      if (serialBoosts < 3) {\n        serialBoosts = 0;\n      }\n    }\n  }\n  // if boostStash is more than quarter of values\n  // or if there are 3 or more boosts in a row\n  if (boostStash.length > values.length / 4 || serialBoosts >= 3) {\n    // if boostStash is more than 3 quarter of values\n    const boostStashID = boostStash.map((status) => status.id);\n    if (boostStash.length > (values.length * 3) / 4) {\n      // insert boost array at the end of specialHome list\n      newValues = [\n        ...newValues,\n        { id: boostStashID, items: boostStash, type: 'boosts' },\n      ];\n    } else {\n      // insert boosts array in the middle of specialHome list\n      const half = Math.floor(newValues.length / 2);\n      newValues = [\n        ...newValues.slice(0, half),\n        {\n          id: boostStashID,\n          items: boostStash,\n          type: 'boosts',\n        },\n        ...newValues.slice(half),\n      ];\n    }\n    return newValues;\n  } else {\n    return values;\n  }\n}\n\nfunction StatusCarousel({ title, class: className, children }) {\n  const carouselRef = useRef();\n  const { reachStart, reachEnd, init } = useScroll({\n    scrollableElement: carouselRef.current,\n    direction: 'horizontal',\n  });\n  useEffect(() => {\n    init?.();\n  }, []);\n\n  return (\n    <div class={`status-carousel ${className}`}>\n      <header>\n        <h3>{title}</h3>\n        <span>\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachStart}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-left\" />\n          </button>{' '}\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachEnd}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-right\" />\n          </button>\n        </span>\n      </header>\n      <ul ref={carouselRef}>{children}</ul>\n    </div>\n  );\n}\n\nexport default Timeline;\n","import { useEffect, useRef, useState } from 'preact/hooks';\nimport { useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport emojifyText from '../utils/emojify-text';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction AccountStatuses() {\n  const snapStates = useSnapshot(states);\n  const { id, ...params } = useParams();\n  const { masto, instance } = api({ instance: params.instance });\n  const accountStatusesIterator = useRef();\n  async function fetchAccountStatuses(firstLoad) {\n    const results = [];\n    if (firstLoad) {\n      const { value: pinnedStatuses } = await masto.v1.accounts\n        .listStatuses(id, {\n          pinned: true,\n        })\n        .next();\n      if (pinnedStatuses?.length) {\n        pinnedStatuses.forEach((status) => {\n          status._pinned = true;\n        });\n        if (pinnedStatuses.length > 1) {\n          const pinnedStatusesIds = pinnedStatuses.map((status) => status.id);\n          results.push({\n            id: pinnedStatusesIds,\n            items: pinnedStatuses,\n            type: 'pinned',\n          });\n        } else {\n          results.push(...pinnedStatuses);\n        }\n      }\n    }\n    if (firstLoad || !accountStatusesIterator.current) {\n      accountStatusesIterator.current = masto.v1.accounts.listStatuses(id, {\n        limit: LIMIT,\n      });\n    }\n    const { value, done } = await accountStatusesIterator.current.next();\n    if (value?.length) {\n      results.push(...value);\n    }\n    return {\n      value: results,\n      done,\n    };\n  }\n\n  const [account, setAccount] = useState({});\n  useTitle(\n    `${account?.acct ? '@' + account.acct : 'Posts'}`,\n    '/:instance?/a/:id',\n  );\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await masto.v1.accounts.fetch(id);\n        console.log(acc);\n        setAccount(acc);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const { displayName, acct, emojis } = account;\n\n  return (\n    <Timeline\n      key={id}\n      title={`${account?.acct ? '@' + account.acct : 'Posts'}`}\n      titleComponent={\n        <h1\n          class=\"header-account\"\n          // onClick={() => {\n          //   states.showAccount = {\n          //     account,\n          //     instance,\n          //   };\n          // }}\n        >\n          <b\n            dangerouslySetInnerHTML={{\n              __html: emojifyText(displayName, emojis),\n            }}\n          />\n          <div>\n            <span>@{acct}</span>\n          </div>\n        </h1>\n      }\n      id=\"account-statuses\"\n      instance={instance}\n      emptyText=\"Nothing to see here yet.\"\n      errorText=\"Unable to load statuses\"\n      fetchItems={fetchAccountStatuses}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n    />\n  );\n}\n\nexport default AccountStatuses;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Bookmarks() {\n  useTitle('Bookmarks', '/b');\n  const { masto, instance } = api();\n  const bookmarksIterator = useRef();\n  async function fetchBookmarks(firstLoad) {\n    if (firstLoad || !bookmarksIterator.current) {\n      bookmarksIterator.current = masto.v1.bookmarks.list({ limit: LIMIT });\n    }\n    return await bookmarksIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Bookmarks\"\n      id=\"bookmarks\"\n      emptyText=\"No bookmarks yet. Go bookmark something!\"\n      errorText=\"Unable to load bookmarks\"\n      instance={instance}\n      fetchItems={fetchBookmarks}\n    />\n  );\n}\n\nexport default Bookmarks;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Favourites() {\n  useTitle('Favourites', '/f');\n  const { masto, instance } = api();\n  const favouritesIterator = useRef();\n  async function fetchFavourites(firstLoad) {\n    if (firstLoad || !favouritesIterator.current) {\n      favouritesIterator.current = masto.v1.favourites.list({ limit: LIMIT });\n    }\n    return await favouritesIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Favourites\"\n      id=\"favourites\"\n      emptyText=\"No favourites yet. Go favourite something!\"\n      errorText=\"Unable to load favourites\"\n      instance={instance}\n      fetchItems={fetchFavourites}\n    />\n  );\n}\n\nexport default Favourites;\n","import { useEffect, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Menu from '../components/menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 200;\n\nfunction FollowedHashtags() {\n  const { masto, instance } = api();\n  useTitle(`Followed Hashtags`, `/ft`);\n  const [uiState, setUiState] = useState('default');\n\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    setUiState('loading');\n    (async () => {\n      try {\n        const iterator = masto.v1.followedTags.list({\n          limit: LIMIT,\n        });\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        console.log(tags);\n        setFollowedHashtags(tags);\n        setUiState('default');\n      } catch (e) {\n        console.error(e);\n        setUiState('error');\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"followed-hashtags-page\" class=\"deck-container\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <Menu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Followed Hashtags</h1>\n            <div class=\"header-side\" />\n          </div>\n        </header>\n        <main>\n          {followedHashtags.length > 0 ? (\n            <ul class=\"link-list\">\n              {followedHashtags.map((tag) => (\n                <li>\n                  <Link\n                    to={\n                      instance ? `/${instance}/t/${tag.name}` : `/t/${tag.name}`\n                    }\n                  >\n                    <Icon icon=\"hashtag\" /> <span>{tag.name}</span>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load followed hashtags.</p>\n          ) : (\n            <p class=\"ui-state\">No hashtags followed yet.</p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default FollowedHashtags;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport { getStatus, saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Following({ title, path, id, ...props }) {\n  useTitle(title || 'Following', path || '/following');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const homeIterator = useRef();\n  const latestItem = useRef();\n\n  async function fetchHome(firstLoad) {\n    if (firstLoad || !homeIterator.current) {\n      homeIterator.current = masto.v1.timelines.listHome({ limit: LIMIT });\n    }\n    const results = await homeIterator.current.next();\n    const { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n\n      // ENFORCE sort by datetime (Latest first)\n      value.sort((a, b) => {\n        const aDate = new Date(a.createdAt);\n        const bDate = new Date(b.createdAt);\n        return bDate - aDate;\n      });\n    }\n    return results;\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines\n        .listHome({\n          limit: 5,\n          since_id: latestItem.current,\n        })\n        .next();\n      const { value } = results;\n      console.log('checkForUpdates', latestItem.current, value);\n      if (value?.length && value.some((item) => !item.reblog)) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const ws = useRef();\n  const streamUser = async () => {\n    console.log('🎏 Start streaming user', ws.current);\n    if (\n      ws.current &&\n      (ws.current.readyState === WebSocket.CONNECTING ||\n        ws.current.readyState === WebSocket.OPEN)\n    ) {\n      console.log('🎏 Streaming user already open');\n      return;\n    }\n    const stream = await masto.v1.stream.streamUser();\n    ws.current = stream.ws;\n    ws.current.__id = Math.random();\n    console.log('🎏 Streaming user', ws.current);\n\n    stream.on('status.update', (status) => {\n      console.log(`🔄 Status ${status.id} updated`);\n      saveStatus(status, instance);\n    });\n\n    stream.on('delete', (statusID) => {\n      console.log(`❌ Status ${statusID} deleted`);\n      // delete states.statuses[statusID];\n      const s = getStatus(statusID, instance);\n      if (s) s._deleted = true;\n    });\n\n    stream.ws.onclose = () => {\n      console.log('🎏 Streaming user closed');\n    };\n\n    return stream;\n  };\n  useEffect(() => {\n    let stream;\n    (async () => {\n      stream = await streamUser();\n    })();\n    return () => {\n      if (stream) {\n        stream.ws.close();\n        ws.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <Timeline\n      title={title || 'Following'}\n      id={id || 'following'}\n      emptyText=\"Nothing to see here.\"\n      errorText=\"Unable to load posts.\"\n      instance={instance}\n      fetchItems={fetchHome}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      {...props}\n    />\n  );\n}\n\nexport default Following;\n","import {\n  FocusableItem,\n  Menu,\n  MenuDivider,\n  MenuGroup,\n  MenuItem,\n} from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport Icon from '../components/icon';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\n// Limit is 4 per \"mode\"\n// https://github.com/mastodon/mastodon/issues/15194\n// Hard-coded https://github.com/mastodon/mastodon/blob/19614ba2477f3d12468f5ec251ce1cc5f8c6210c/app/models/tag_feed.rb#L4\nconst TAGS_LIMIT_PER_MODE = 4;\nconst TOTAL_TAGS_LIMIT = TAGS_LIMIT_PER_MODE + 1;\n\nfunction Hashtags(props) {\n  const navigate = useNavigate();\n  let { hashtag, ...params } = useParams();\n  if (props.hashtag) hashtag = props.hashtag;\n  let hashtags = hashtag.trim().split(/[\\s+]+/);\n  hashtags.sort();\n  hashtag = hashtags[0];\n\n  const { masto, instance } = api({ instance: params.instance });\n  const { authenticated } = api();\n  const hashtagTitle = hashtags.map((t) => `#${t}`).join(' ');\n  const title = instance ? `${hashtagTitle} on ${instance}` : hashtagTitle;\n  useTitle(title, `/:instance?/t/:hashtag`);\n  const latestItem = useRef();\n\n  const hashtagsIterator = useRef();\n  async function fetchHashtags(firstLoad) {\n    if (firstLoad || !hashtagsIterator.current) {\n      hashtagsIterator.current = masto.v1.timelines.listHashtag(hashtag, {\n        limit: LIMIT,\n        any: hashtags.slice(1),\n      });\n    }\n    const results = await hashtagsIterator.current.next();\n    const { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n    }\n    return results;\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines\n        .listHashtag(hashtag, {\n          limit: 1,\n          any: hashtags.slice(1),\n          since_id: latestItem.current,\n        })\n        .next();\n      const { value } = results;\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [followUIState, setFollowUIState] = useState('default');\n  const [info, setInfo] = useState();\n  // Get hashtag info\n  useEffect(() => {\n    (async () => {\n      try {\n        const info = await masto.v1.tags.fetch(hashtag);\n        console.log(info);\n        setInfo(info);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [hashtag]);\n\n  const reachLimit = hashtags.length >= TOTAL_TAGS_LIMIT;\n\n  return (\n    <Timeline\n      key={hashtagTitle}\n      title={title}\n      titleComponent={\n        !!instance && (\n          <h1 class=\"header-account\">\n            <b>{hashtagTitle}</b>\n            <div>{instance}</div>\n          </h1>\n        )\n      }\n      id=\"hashtag\"\n      instance={instance}\n      emptyText=\"No one has posted anything with this tag yet.\"\n      errorText=\"Unable to load posts with this tag\"\n      fetchItems={fetchHashtags}\n      checkForUpdates={checkForUpdates}\n      headerEnd={\n        <Menu\n          portal={{\n            target: document.body,\n          }}\n          setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          boundingBoxPadding=\"8 8 8 8\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          {!!info && hashtags.length === 1 && (\n            <>\n              <MenuItem\n                disabled={followUIState === 'loading' || !authenticated}\n                onClick={() => {\n                  setFollowUIState('loading');\n                  if (info.following) {\n                    const yes = confirm(`Unfollow #${hashtag}?`);\n                    if (!yes) {\n                      setFollowUIState('default');\n                      return;\n                    }\n                    masto.v1.tags\n                      .unfollow(hashtag)\n                      .then(() => {\n                        setInfo({ ...info, following: false });\n                        showToast(`Unfollowed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  } else {\n                    masto.v1.tags\n                      .follow(hashtag)\n                      .then(() => {\n                        setInfo({ ...info, following: true });\n                        showToast(`Followed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  }\n                }}\n              >\n                {info.following ? (\n                  <>\n                    <Icon icon=\"check-circle\" /> <span>Following…</span>\n                  </>\n                ) : (\n                  <>\n                    <Icon icon=\"plus\" /> <span>Follow</span>\n                  </>\n                )}\n              </MenuItem>\n              <MenuDivider />\n            </>\n          )}\n          <FocusableItem className=\"menu-field\" disabled={reachLimit}>\n            {({ ref }) => (\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const newHashtag = e.target[0].value;\n                  // Use includes but need to be case insensitive\n                  if (\n                    newHashtag &&\n                    !hashtags.some(\n                      (t) => t.toLowerCase() === newHashtag.toLowerCase(),\n                    )\n                  ) {\n                    hashtags.push(newHashtag);\n                    hashtags.sort();\n                    navigate(\n                      instance\n                        ? `/${instance}/t/${hashtags.join('+')}`\n                        : `/t/${hashtags.join('+')}`,\n                    );\n                  }\n                }}\n              >\n                <Icon icon=\"hashtag\" />\n                <input\n                  ref={ref}\n                  type=\"text\"\n                  placeholder={\n                    reachLimit ? `Max ${TOTAL_TAGS_LIMIT} tags` : 'Add hashtag'\n                  }\n                  required\n                  // no spaces, no hashtags\n                  pattern=\"[^\\s#]+\"\n                  disabled={reachLimit}\n                />\n              </form>\n            )}\n          </FocusableItem>\n          <MenuGroup takeOverflow>\n            {hashtags.map((t, i) => (\n              <MenuItem\n                key={t}\n                onClick={(e) => {\n                  hashtags.splice(i, 1);\n                  hashtags.sort();\n                  navigate(\n                    instance\n                      ? `/${instance}/t/${hashtags.join('+')}`\n                      : `/t/${hashtags.join('+')}`,\n                  );\n                }}\n              >\n                <Icon icon=\"x\" alt=\"Remove hashtag\" class=\"danger-icon\" />\n                <span>\n                  <span class=\"more-insignificant\">#</span>\n                  {t}\n                </span>\n              </MenuItem>\n            ))}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuItem\n            disabled={!authenticated}\n            onClick={() => {\n              const shortcut = {\n                type: 'hashtag',\n                hashtag: hashtags.join(' '),\n              };\n              // Check if already exists\n              const exists = states.shortcuts.some(\n                (s) =>\n                  s.type === shortcut.type &&\n                  s.hashtag\n                    .split(/[\\s+]+/)\n                    .sort()\n                    .join(' ') ===\n                    shortcut.hashtag\n                      .split(/[\\s+]+/)\n                      .sort()\n                      .join(' '),\n              );\n              if (exists) {\n                alert('This shortcut already exists');\n              } else {\n                states.shortcuts.push(shortcut);\n                showToast(`Hashtag shortcut added`);\n              }\n            }}\n          >\n            <Icon icon=\"shortcut\" /> <span>Add to Shorcuts</span>\n          </MenuItem>\n        </Menu>\n      }\n    />\n  );\n}\n\nexport default Hashtags;\n","import { useEffect, useRef, useState } from 'preact/hooks';\nimport { useParams } from 'react-router-dom';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction List(props) {\n  const { masto, instance } = api();\n  const id = props?.id || useParams()?.id;\n  const latestItem = useRef();\n\n  const listIterator = useRef();\n  async function fetchList(firstLoad) {\n    if (firstLoad || !listIterator.current) {\n      listIterator.current = masto.v1.timelines.listList(id, {\n        limit: LIMIT,\n      });\n    }\n    const results = await listIterator.current.next();\n    const { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n    }\n    return results;\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.listList(id, {\n        limit: 1,\n        since_id: latestItem.current,\n      });\n      const { value } = results;\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [title, setTitle] = useState(`List`);\n  useTitle(title, `/l/:id`);\n  useEffect(() => {\n    (async () => {\n      try {\n        const list = await masto.v1.lists.fetch(id);\n        setTitle(list.title);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  return (\n    <Timeline\n      title={title}\n      id=\"list\"\n      emptyText=\"Nothing yet.\"\n      errorText=\"Unable to load posts.\"\n      instance={instance}\n      fetchItems={fetchList}\n      checkForUpdates={checkForUpdates}\n      boostsCarousel\n      headerStart={\n        <Link to=\"/l\" class=\"button plain\">\n          <Icon icon=\"list\" size=\"l\" />\n        </Link>\n      }\n    />\n  );\n}\n\nexport default List;\n","import './notifications.css';\n\nimport { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Menu from '../components/menu';\nimport NameText from '../components/name-text';\nimport RelativeTime from '../components/relative-time';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport states, { saveStatus } from '../utils/states';\nimport store from '../utils/store';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\n/*\nNotification types\n==================\nmention = Someone mentioned you in their status\nstatus = Someone you enabled notifications for has posted a status\nreblog = Someone boosted one of your statuses\nfollow = Someone followed you\nfollow_request = Someone requested to follow you\nfavourite = Someone favourited one of your statuses\npoll = A poll you have voted in or created has ended\nupdate = A status you interacted with has been edited\nadmin.sign_up = Someone signed up (optionally sent to admins)\nadmin.report = A new report has been filed\n*/\n\nconst contentText = {\n  mention: 'mentioned you in their status.',\n  status: 'posted a status.',\n  reblog: 'boosted your status.',\n  follow: 'followed you.',\n  follow_request: 'requested to follow you.',\n  favourite: 'favourited your status.',\n  poll: 'A poll you have voted in or created has ended.',\n  'poll-self': 'A poll you have created has ended.',\n  'poll-voted': 'A poll you have voted in has ended.',\n  update: 'A status you interacted with has been edited.',\n};\n\nconst LIMIT = 30; // 30 is the maximum limit :(\n\nfunction Notifications() {\n  useTitle('Notifications', '/notifications');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n  const [onlyMentions, setOnlyMentions] = useState(false);\n  const scrollableRef = useRef();\n  const { nearReachEnd, scrollDirection, reachStart, nearReachStart } =\n    useScroll({\n      scrollableElement: scrollableRef.current,\n    });\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n\n  console.debug('RENDER Notifications');\n\n  const notificationsIterator = useRef();\n  async function fetchNotifications(firstLoad) {\n    if (firstLoad || !notificationsIterator.current) {\n      // Reset iterator\n      notificationsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n      });\n    }\n    const allNotifications = await notificationsIterator.current.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      if (firstLoad) {\n        states.notificationsLast = notifications[0];\n        states.notifications = groupedNotifications;\n      } else {\n        states.notifications.push(...groupedNotifications);\n      }\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  const loadNotifications = (firstLoad) => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const { done } = await fetchNotifications(firstLoad);\n        setShowMore(!done);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  useEffect(() => {\n    loadNotifications(true);\n  }, []);\n  useEffect(() => {\n    if (reachStart) {\n      loadNotifications(true);\n    }\n  }, [reachStart]);\n\n  useEffect(() => {\n    if (nearReachEnd && showMore) {\n      loadNotifications();\n    }\n  }, [nearReachEnd, showMore]);\n\n  const todayDate = new Date();\n  const yesterdayDate = new Date(todayDate - 24 * 60 * 60 * 1000);\n  let currentDay = new Date();\n  const showTodayEmpty = !snapStates.notifications.some(\n    (notification) =>\n      new Date(notification.createdAt).toDateString() ===\n      todayDate.toDateString(),\n  );\n\n  return (\n    <div\n      id=\"notifications-page\"\n      class=\"deck-container\"\n      ref={scrollableRef}\n      tabIndex=\"-1\"\n    >\n      <div class={`timeline-deck deck ${onlyMentions ? 'only-mentions' : ''}`}>\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n          }}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <Menu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Notifications</h1>\n            <div class=\"header-side\">\n              <Loader hidden={uiState !== 'loading'} />\n            </div>\n          </div>\n          {snapStates.notificationsShowNew && uiState !== 'loading' && (\n            <button\n              class=\"updates-button shiny-pill\"\n              type=\"button\"\n              onClick={() => {\n                loadNotifications(true);\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }}\n            >\n              <Icon icon=\"arrow-up\" /> New notifications\n            </button>\n          )}\n        </header>\n        <div id=\"mentions-option\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={onlyMentions}\n              onChange={(e) => {\n                setOnlyMentions(e.target.checked);\n              }}\n            />{' '}\n            Only mentions\n          </label>\n        </div>\n        <h2 class=\"timeline-header\">Today</h2>\n        {showTodayEmpty && !!snapStates.notifications.length && (\n          <p class=\"ui-state insignificant\">\n            {uiState === 'default' ? \"You're all caught up.\" : <>&hellip;</>}\n          </p>\n        )}\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications.map((notification) => {\n              if (onlyMentions && notification.type !== 'mention') {\n                return null;\n              }\n              const notificationDay = new Date(notification.createdAt);\n              const differentDay =\n                notificationDay.toDateString() !== currentDay.toDateString();\n              if (differentDay) {\n                currentDay = notificationDay;\n              }\n              // if notificationDay is yesterday, show \"Yesterday\"\n              // if notificationDay is before yesterday, show date\n              const heading =\n                notificationDay.toDateString() === yesterdayDate.toDateString()\n                  ? 'Yesterday'\n                  : Intl.DateTimeFormat('en', {\n                      // Show year if not current year\n                      year:\n                        currentDay.getFullYear() === todayDate.getFullYear()\n                          ? undefined\n                          : 'numeric',\n                      month: 'short',\n                      day: 'numeric',\n                    }).format(currentDay);\n              return (\n                <>\n                  {differentDay && <h2 class=\"timeline-header\">{heading}</h2>}\n                  <Notification\n                    instance={instance}\n                    notification={notification}\n                    key={notification.id}\n                  />\n                </>\n              );\n            })}\n          </>\n        ) : (\n          <>\n            {uiState === 'loading' && (\n              <>\n                <ul class=\"timeline flat\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <li class=\"notification skeleton\">\n                      <div class=\"notification-type\">\n                        <Icon icon=\"notification\" size=\"xl\" />\n                      </div>\n                      <div class=\"notification-content\">\n                        <p>███████████ ████</p>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )}\n            {uiState === 'error' && (\n              <p class=\"ui-state\">\n                Unable to load notifications\n                <br />\n                <br />\n                <button type=\"button\" onClick={() => loadNotifications(true)}>\n                  Try again\n                </button>\n              </p>\n            )}\n          </>\n        )}\n        {showMore && (\n          <button\n            type=\"button\"\n            class=\"plain block\"\n            disabled={uiState === 'loading'}\n            onClick={() => loadNotifications()}\n            style={{ marginBlockEnd: '6em' }}\n          >\n            {uiState === 'loading' ? <Loader abrupt /> : <>Show more&hellip;</>}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\nfunction Notification({ notification, instance }) {\n  const { id, type, status, account, _accounts } = notification;\n\n  // status = Attached when type of the notification is favourite, reblog, status, mention, poll, or update\n  const actualStatusID = status?.reblog?.id || status?.id;\n\n  const currentAccount = store.session.get('currentAccount');\n  const isSelf = currentAccount === account?.id;\n  const isVoted = status?.poll?.voted;\n\n  const text =\n    type === 'poll'\n      ? contentText[isSelf ? 'poll-self' : isVoted ? 'poll-voted' : 'poll']\n      : contentText[type];\n\n  return (\n    <div class={`notification ${type}`} tabIndex=\"0\">\n      <div\n        class={`notification-type notification-${type}`}\n        title={new Date(notification.createdAt).toLocaleString()}\n      >\n        <Icon\n          icon={\n            {\n              mention: 'comment',\n              status: 'notification',\n              reblog: 'rocket',\n              follow: 'follow',\n              follow_request: 'follow-add',\n              favourite: 'heart',\n              poll: 'poll',\n              update: 'pencil',\n            }[type] || 'notification'\n          }\n          size=\"xl\"\n          alt={type}\n        />\n      </div>\n      <div class=\"notification-content\">\n        {type !== 'mention' && (\n          <>\n            <p>\n              {!/poll|update/i.test(type) && (\n                <>\n                  {_accounts?.length > 1 ? (\n                    <>\n                      <b>{_accounts.length} people</b>{' '}\n                    </>\n                  ) : (\n                    <>\n                      <NameText account={account} showAvatar />{' '}\n                    </>\n                  )}\n                </>\n              )}\n              {text}\n              {type === 'mention' && (\n                <span class=\"insignificant\">\n                  {' '}\n                  •{' '}\n                  <RelativeTime\n                    datetime={notification.createdAt}\n                    format=\"micro\"\n                  />\n                </span>\n              )}\n            </p>\n            {type === 'follow_request' && (\n              <FollowRequestButtons\n                accountID={account.id}\n                onChange={() => {\n                  loadNotifications(true);\n                }}\n              />\n            )}\n          </>\n        )}\n        {_accounts?.length > 1 && (\n          <p class=\"avatars-stack\">\n            {_accounts.map((account, i) => (\n              <>\n                <a\n                  href={account.url}\n                  rel=\"noopener noreferrer\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    states.showAccount = account;\n                  }}\n                >\n                  <Avatar\n                    url={account.avatarStatic}\n                    size={\n                      _accounts.length <= 10\n                        ? 'xxl'\n                        : _accounts.length < 100\n                        ? 'xl'\n                        : _accounts.length < 1000\n                        ? 'l'\n                        : _accounts.length < 2000\n                        ? 'm'\n                        : 's' // My god, this person is popular!\n                    }\n                    key={account.id}\n                    alt={`${account.displayName} @${account.acct}`}\n                  />\n                </a>{' '}\n              </>\n            ))}\n          </p>\n        )}\n        {status && (\n          <Link\n            class={`status-link status-type-${type}`}\n            to={\n              instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`\n            }\n          >\n            <Status status={status} size=\"s\" />\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction FollowRequestButtons({ accountID, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  return (\n    <p>\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading'}\n        onClick={() => {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.followRequests.authorize(accountID);\n              onChange();\n            } catch (e) {\n              console.error(e);\n              setUIState('default');\n            }\n          })();\n        }}\n      >\n        Accept\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading'}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.followRequests.reject(accountID);\n              onChange();\n            } catch (e) {\n              console.error(e);\n              setUIState('default');\n            }\n          })();\n        }}\n      >\n        Reject\n      </button>\n      <Loader hidden={uiState !== 'loading'} />\n    </p>\n  );\n}\n\nfunction groupNotifications(notifications) {\n  // Create new flat list of notifications\n  // Combine sibling notifications based on type and status id\n  // Concat all notification.account into an array of _accounts\n  const notificationsMap = {};\n  const cleanNotifications = [];\n  for (let i = 0, j = 0; i < notifications.length; i++) {\n    const notification = notifications[i];\n    const { status, account, type, createdAt } = notification;\n    const date = new Date(createdAt).toLocaleDateString();\n    const key = `${status?.id}-${type}-${date}`;\n    const mappedNotification = notificationsMap[key];\n    if (type === 'follow_request') {\n      cleanNotifications[j++] = notification;\n    } else if (mappedNotification?.account) {\n      mappedNotification._accounts.push(account);\n    } else {\n      let n = (notificationsMap[key] = {\n        ...notification,\n        _accounts: [account],\n      });\n      cleanNotifications[j++] = n;\n    }\n  }\n  return cleanNotifications;\n}\n\nexport default memo(Notifications);\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useRef } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport Icon from '../components/icon';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Public({ local, ...props }) {\n  const isLocal = !!local;\n  const params = useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const title = `${isLocal ? 'Local' : 'Federated'} timeline (${instance})`;\n  useTitle(title, isLocal ? `/:instance?/p/l` : `/:instance?/p`);\n  const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const publicIterator = useRef();\n  async function fetchPublic(firstLoad) {\n    if (firstLoad || !publicIterator.current) {\n      publicIterator.current = masto.v1.timelines.listPublic({\n        limit: LIMIT,\n        local: isLocal,\n      });\n    }\n    const results = await publicIterator.current.next();\n    const { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n    }\n    return results;\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines\n        .listPublic({\n          limit: 1,\n          local: isLocal,\n          since_id: latestItem.current,\n        })\n        .next();\n      const { value } = results;\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return (\n    <Timeline\n      key={instance + isLocal}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-account\">\n          <b>{isLocal ? 'Local timeline' : 'Federated timeline'}</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"public\"\n      instance={instance}\n      emptyText=\"No one has posted anything yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchPublic}\n      checkForUpdates={checkForUpdates}\n      headerStart={<></>}\n      headerEnd={\n        <Menu\n          portal={{\n            target: document.body,\n          }}\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          boundingBoxPadding=\"8 8 8 8\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem href={isLocal ? `/#/${instance}/p` : `/#/${instance}/p/l`}>\n            {isLocal ? (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Federated</span>\n              </>\n            ) : (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Local</span>\n              </>\n            )}\n          </MenuItem>\n          <MenuDivider />\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                navigate(isLocal ? `/${newInstance}/p/l` : `/${newInstance}/p`);\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu>\n      }\n    />\n  );\n}\n\nexport default Public;\n","import { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport Bookmarks from '../pages/bookmarks';\nimport Favourites from '../pages/favourites';\nimport Following from '../pages/following';\nimport Hashtag from '../pages/hashtag';\nimport List from '../pages/list';\nimport Notifications from '../pages/notifications';\nimport Public from '../pages/public';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Columns() {\n  useTitle('Home', '/');\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  const components = shortcuts.map((shortcut) => {\n    const { type, ...params } = shortcut;\n    const Component = {\n      following: Following,\n      notifications: Notifications,\n      list: List,\n      public: Public,\n      bookmarks: Bookmarks,\n      favourites: Favourites,\n      hashtag: Hashtag,\n    }[type];\n    if (!Component) return null;\n    return <Component {...params} />;\n  });\n\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    try {\n      const index = parseInt(handler.keys[0], 10) - 1;\n      document.querySelectorAll('#columns > *')[index].focus();\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  return <div id=\"columns\">{components}</div>;\n}\n\nexport default Columns;\n","import { useEffect } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Columns from '../components/columns';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport db from '../utils/db';\nimport openCompose from '../utils/open-compose';\nimport states from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Following from './following';\n\nfunction Home() {\n  const snapStates = useSnapshot(states);\n  useEffect(() => {\n    (async () => {\n      const keys = await db.drafts.keys();\n      if (keys.length) {\n        const ns = getCurrentAccountNS();\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\n        if (ownKeys.length) {\n          states.showDrafts = true;\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {(snapStates.settings.shortcutsColumnsMode ||\n        snapStates.settings.shortcutsViewMode === 'multi-column') &&\n      !!snapStates.shortcuts?.length ? (\n        <Columns />\n      ) : (\n        <Following\n          title=\"Home\"\n          path=\"/\"\n          id=\"home\"\n          headerStart={false}\n          headerEnd={\n            <Link\n              to=\"/notifications\"\n              class={`button plain notifications-button ${\n                snapStates.notificationsShowNew ? 'has-badge' : ''\n              }`}\n              onClick={(e) => {\n                e.stopPropagation();\n              }}\n            >\n              <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\n            </Link>\n          }\n        />\n      )}\n      <button\n        // hidden={scrollDirection === 'end' && !nearReachStart}\n        type=\"button\"\n        id=\"compose-button\"\n        onClick={(e) => {\n          if (e.shiftKey) {\n            const newWin = openCompose();\n            if (!newWin) {\n              alert('Looks like your browser is blocking popups.');\n              states.showCompose = true;\n            }\n          } else {\n            states.showCompose = true;\n          }\n        }}\n      >\n        <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\n      </button>\n    </>\n  );\n}\n\nexport default Home;\n","import { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Home({ hidden }) {\n  useTitle('Home', '/');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n\n  console.debug('RENDER Home');\n\n  const homeIterator = useRef();\n  async function fetchStatuses(firstLoad) {\n    if (firstLoad) {\n      // Reset iterator\n      homeIterator.current = masto.v1.timelines.listHome({\n        limit: LIMIT,\n      });\n      states.homeNew = [];\n    }\n    const allStatuses = await homeIterator.current.next();\n    if (allStatuses.value?.length) {\n      // ENFORCE sort by datetime (Latest first)\n      allStatuses.value.sort((a, b) => {\n        const aDate = new Date(a.createdAt);\n        const bDate = new Date(b.createdAt);\n        return bDate - aDate;\n      });\n      const homeValues = allStatuses.value.map((status) => {\n        saveStatus(status, instance);\n        return {\n          id: status.id,\n          reblog: status.reblog?.id,\n          reply: !!status.inReplyToAccountId,\n        };\n      });\n\n      // BOOSTS CAROUSEL\n      if (snapStates.settings.boostsCarousel) {\n        let specialHome = [];\n        let boostStash = [];\n        let serialBoosts = 0;\n        for (let i = 0; i < homeValues.length; i++) {\n          const status = homeValues[i];\n          if (status.reblog) {\n            boostStash.push(status);\n            serialBoosts++;\n          } else {\n            specialHome.push(status);\n            if (serialBoosts < 3) {\n              serialBoosts = 0;\n            }\n          }\n        }\n        // if boostStash is more than quarter of homeValues\n        // or if there are 3 or more boosts in a row\n        if (boostStash.length > homeValues.length / 4 || serialBoosts >= 3) {\n          // if boostStash is more than 3 quarter of homeValues\n          const boostStashID = boostStash.map((status) => status.id);\n          if (boostStash.length > (homeValues.length * 3) / 4) {\n            // insert boost array at the end of specialHome list\n            specialHome = [\n              ...specialHome,\n              { id: boostStashID, boosts: boostStash },\n            ];\n          } else {\n            // insert boosts array in the middle of specialHome list\n            const half = Math.floor(specialHome.length / 2);\n            specialHome = [\n              ...specialHome.slice(0, half),\n              {\n                id: boostStashID,\n                boosts: boostStash,\n              },\n              ...specialHome.slice(half),\n            ];\n          }\n        } else {\n          // Untouched, this is fine\n          specialHome = homeValues;\n        }\n        console.log({\n          specialHome,\n        });\n        if (firstLoad) {\n          states.homeLast = specialHome[0];\n          states.home = specialHome;\n        } else {\n          states.home.push(...specialHome);\n        }\n      } else {\n        if (firstLoad) {\n          states.homeLast = homeValues[0];\n          states.home = homeValues;\n        } else {\n          states.home.push(...homeValues);\n        }\n      }\n    }\n\n    states.homeLastFetchTime = Date.now();\n    return allStatuses;\n  }\n\n  const loadStatuses = useDebouncedCallback(\n    (firstLoad) => {\n      if (uiState === 'loading') return;\n      setUIState('loading');\n      (async () => {\n        try {\n          const { done } = await fetchStatuses(firstLoad);\n          setShowMore(!done);\n          setUIState('default');\n        } catch (e) {\n          console.warn(e);\n          setUIState('error');\n        } finally {\n        }\n      })();\n    },\n    1500,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  useEffect(() => {\n    loadStatuses(true);\n  }, []);\n\n  const scrollableRef = useRef();\n\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\n    // focus on next status after active status\n    // Traverses .timeline li .status-link, focus on .status-link\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-boost-link',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(\n        '.status-link, .status-boost-link',\n      ),\n    );\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\n      if (handler.shift) {\n        // get next status that's not .status-boost-link\n        nextStatus = allStatusLinks.find(\n          (statusLink, index) =>\n            index > activeStatusIndex &&\n            !statusLink.classList.contains('status-boost-link'),\n        );\n      }\n      if (nextStatus) {\n        nextStatus.focus();\n        nextStatus.scrollIntoViewIfNeeded?.();\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoViewIfNeeded?.();\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\n    // focus on previous status after active status\n    // Traverses .timeline li .status-link, focus on .status-link\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-boost-link',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(\n        '.status-link, .status-boost-link',\n      ),\n    );\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\n      if (handler.shift) {\n        // get prev status that's not .status-boost-link\n        prevStatus = allStatusLinks.findLast(\n          (statusLink, index) =>\n            index < activeStatusIndex &&\n            !statusLink.classList.contains('status-boost-link'),\n        );\n      }\n      if (prevStatus) {\n        prevStatus.focus();\n        prevStatus.scrollIntoViewIfNeeded?.();\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoViewIfNeeded?.();\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    // open active status\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-boost-link',\n    );\n    if (activeStatus) {\n      activeStatus.click();\n    }\n  });\n\n  const {\n    scrollDirection,\n    reachStart,\n    nearReachStart,\n    nearReachEnd,\n    reachEnd,\n  } = useScroll({\n    scrollableElement: scrollableRef.current,\n    distanceFromEnd: 3,\n    scrollThresholdStart: 44,\n  });\n\n  useEffect(() => {\n    if (nearReachEnd || (reachEnd && showMore)) {\n      loadStatuses();\n    }\n  }, [nearReachEnd, reachEnd]);\n\n  useEffect(() => {\n    if (reachStart) {\n      loadStatuses(true);\n    }\n  }, [reachStart]);\n\n  useEffect(() => {\n    (async () => {\n      const keys = await db.drafts.keys();\n      if (keys.length) {\n        const ns = getCurrentAccountNS();\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\n        if (ownKeys.length) {\n          states.showDrafts = true;\n        }\n      }\n    })();\n  }, []);\n\n  // const showUpdatesButton = snapStates.homeNew.length > 0 && reachStart;\n  const [showUpdatesButton, setShowUpdatesButton] = useState(false);\n  useEffect(() => {\n    const isNewAndTop = snapStates.homeNew.length > 0 && reachStart;\n    console.log(\n      'isNewAndTop',\n      isNewAndTop,\n      snapStates.homeNew.length,\n      reachStart,\n    );\n    setShowUpdatesButton(isNewAndTop);\n  }, [snapStates.homeNew.length, reachStart]);\n\n  return (\n    <>\n      <div\n        id=\"home-page\"\n        class=\"deck-container\"\n        hidden={hidden}\n        ref={(node) => {\n          scrollableRef.current = node;\n          jRef.current = node;\n          kRef.current = node;\n          oRef.current = node;\n        }}\n        tabIndex=\"-1\"\n      >\n        <div class=\"timeline-deck deck\">\n          <header\n            hidden={scrollDirection === 'end' && !nearReachStart}\n            onClick={() => {\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\n            }}\n            onDblClick={() => {\n              loadStatuses(true);\n            }}\n          >\n            <div class=\"header-grid\">\n              <div class=\"header-side\">\n                <button\n                  type=\"button\"\n                  class=\"plain\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    states.showSettings = true;\n                  }}\n                >\n                  <Icon icon=\"gear\" size=\"l\" alt=\"Settings\" />\n                </button>\n              </div>\n              <h1>Home</h1>\n              <div class=\"header-side\">\n                <Loader hidden={uiState !== 'loading'} />{' '}\n                <Link\n                  to=\"/notifications\"\n                  class={`button plain ${\n                    snapStates.notificationsNew.length > 0 ? 'has-badge' : ''\n                  }`}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                  }}\n                >\n                  <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\n                </Link>\n              </div>\n            </div>\n            {snapStates.homeNew.length > 0 &&\n              uiState !== 'loading' &&\n              ((scrollDirection === 'start' &&\n                !nearReachStart &&\n                !nearReachEnd) ||\n                showUpdatesButton) && (\n                <button\n                  class=\"updates-button\"\n                  type=\"button\"\n                  onClick={() => {\n                    if (!snapStates.settings.boostsCarousel) {\n                      const uniqueHomeNew = snapStates.homeNew.filter(\n                        (status) =>\n                          !states.home.some((s) => s.id === status.id),\n                      );\n                      states.home.unshift(...uniqueHomeNew);\n                    }\n                    loadStatuses(true);\n                    states.homeNew = [];\n\n                    scrollableRef.current?.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                >\n                  <Icon icon=\"arrow-up\" /> New posts\n                </button>\n              )}\n          </header>\n          {snapStates.home.length ? (\n            <>\n              <ul class=\"timeline\">\n                {snapStates.home.map(({ id: statusID, reblog, boosts }) => {\n                  const actualStatusID = reblog || statusID;\n                  if (boosts) {\n                    return (\n                      <li key={statusID}>\n                        <BoostsCarousel boosts={boosts} />\n                      </li>\n                    );\n                  }\n                  return (\n                    <li key={statusID}>\n                      <Link class=\"status-link\" to={`/s/${actualStatusID}`}>\n                        <Status statusID={statusID} />\n                      </Link>\n                    </li>\n                  );\n                })}\n                {showMore && uiState === 'loading' && (\n                  <>\n                    <li\n                      style={{\n                        height: '20vh',\n                      }}\n                    >\n                      <Status skeleton />\n                    </li>\n                    <li\n                      style={{\n                        height: '25vh',\n                      }}\n                    >\n                      <Status skeleton />\n                    </li>\n                  </>\n                )}\n              </ul>\n              {uiState === 'default' &&\n                (showMore ? (\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadStatuses()}\n                    style={{ marginBlockEnd: '6em' }}\n                  >\n                    Show more&hellip;\n                  </button>\n                ) : (\n                  <p class=\"ui-state insignificant\">The end.</p>\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <ul class=\"timeline\">\n              {Array.from({ length: 5 }).map((_, i) => (\n                <li key={i}>\n                  <Status skeleton />\n                </li>\n              ))}\n            </ul>\n          ) : (\n            uiState !== 'error' && <p class=\"ui-state\">Nothing to see here.</p>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              Unable to load statuses\n              <br />\n              <br />\n              <button\n                type=\"button\"\n                onClick={() => {\n                  loadStatuses(true);\n                }}\n              >\n                Try again\n              </button>\n            </p>\n          )}\n        </div>\n      </div>\n      <button\n        hidden={scrollDirection === 'end' && !nearReachStart}\n        type=\"button\"\n        id=\"compose-button\"\n        onClick={(e) => {\n          if (e.shiftKey) {\n            const newWin = openCompose();\n            if (!newWin) {\n              alert('Looks like your browser is blocking popups.');\n              states.showCompose = true;\n            }\n          } else {\n            states.showCompose = true;\n          }\n        }}\n      >\n        <Icon icon=\"quill\" size=\"xxl\" alt=\"Compose\" />\n      </button>\n    </>\n  );\n}\n\nfunction BoostsCarousel({ boosts }) {\n  const carouselRef = useRef();\n  const { reachStart, reachEnd, init } = useScroll({\n    scrollableElement: carouselRef.current,\n    direction: 'horizontal',\n  });\n  useEffect(() => {\n    init?.();\n  }, []);\n\n  return (\n    <div class=\"boost-carousel\">\n      <header>\n        <h3>{boosts.length} Boosts</h3>\n        <span>\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachStart}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-left\" />\n          </button>{' '}\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachEnd}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-right\" />\n          </button>\n        </span>\n      </header>\n      <ul ref={carouselRef}>\n        {boosts.map((boost) => {\n          const { id: statusID, reblog } = boost;\n          const actualStatusID = reblog || statusID;\n          return (\n            <li key={statusID}>\n              <Link class=\"status-boost-link\" to={`/s/${actualStatusID}`}>\n                <Status statusID={statusID} size=\"s\" />\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default memo(Home);\n","import { useEffect, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Menu from '../components/menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nfunction Lists() {\n  const { masto } = api();\n  useTitle(`Lists`, `/l`);\n  const [uiState, setUiState] = useState('default');\n\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    setUiState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        console.log(lists);\n        setLists(lists);\n        setUiState('default');\n      } catch (e) {\n        console.error(e);\n        setUiState('error');\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"lists-page\" class=\"deck-container\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <Menu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Lists</h1>\n            <div class=\"header-side\" />\n          </div>\n        </header>\n        <main>\n          {lists.length > 0 ? (\n            <ul class=\"link-list\">\n              {lists.map((list) => (\n                <li>\n                  <Link to={`/l/${list.id}`}>\n                    <Icon icon=\"list\" /> <span>{list.title}</span>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load lists.</p>\n          ) : (\n            <p class=\"ui-state\">No lists yet.</p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Lists;\n","export default \"__VITE_ASSET__cc8865ad__\"","const { VITE_CLIENT_NAME: CLIENT_NAME, VITE_WEBSITE: WEBSITE } = import.meta\n  .env;\n\nexport async function registerApplication({ instanceURL }) {\n  const registrationParams = new URLSearchParams({\n    client_name: CLIENT_NAME,\n    redirect_uris: location.origin,\n    scopes: 'read write follow',\n    website: WEBSITE,\n  });\n  const registrationResponse = await fetch(\n    `https://${instanceURL}/api/v1/apps`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: registrationParams.toString(),\n    },\n  );\n  const registrationJSON = await registrationResponse.json();\n  console.log({ registrationJSON });\n  return registrationJSON;\n}\n\nexport async function getAuthorizationURL({ instanceURL, client_id }) {\n  const authorizationParams = new URLSearchParams({\n    client_id,\n    scope: 'read write follow',\n    redirect_uri: location.origin,\n    // redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',\n    response_type: 'code',\n  });\n  const authorizationURL = `https://${instanceURL}/oauth/authorize?${authorizationParams.toString()}`;\n  return authorizationURL;\n}\n\nexport async function getAccessToken({\n  instanceURL,\n  client_id,\n  client_secret,\n  code,\n}) {\n  const params = new URLSearchParams({\n    client_id,\n    client_secret,\n    redirect_uri: location.origin,\n    grant_type: 'authorization_code',\n    code,\n    scope: 'read write follow',\n  });\n  const tokenResponse = await fetch(`https://${instanceURL}/oauth/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n  const tokenJSON = await tokenResponse.json();\n  console.log({ tokenJSON });\n  return tokenJSON;\n}\n","import './login.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport instancesListURL from '../data/instances.json?url';\nimport { getAuthorizationURL, registerApplication } from '../utils/auth';\nimport store from '../utils/store';\nimport useTitle from '../utils/useTitle';\n\nfunction Login() {\n  useTitle('Log in');\n  const instanceURLRef = useRef();\n  const cachedInstanceURL = store.local.get('instanceURL');\n  const [uiState, setUIState] = useState('default');\n\n  const [instancesList, setInstancesList] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(instancesListURL);\n        const data = await res.json();\n        setInstancesList(data);\n      } catch (e) {\n        // Silently fail\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (cachedInstanceURL) {\n      instanceURLRef.current.value = cachedInstanceURL.toLowerCase();\n    }\n  }, []);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { elements } = e.target;\n    let instanceURL = elements.instanceURL.value.toLowerCase();\n    // Remove protocol from instance URL\n    instanceURL = instanceURL.replace(/^https?:\\/\\//, '').replace(/\\/+$/, '');\n    // Remove @acct@ or acct@ from instance URL\n    instanceURL = instanceURL.replace(/^@?[^@]+@/, '');\n    store.local.set('instanceURL', instanceURL);\n\n    (async () => {\n      setUIState('loading');\n      try {\n        const { client_id, client_secret } = await registerApplication({\n          instanceURL,\n        });\n\n        if (client_id && client_secret) {\n          store.session.set('clientID', client_id);\n          store.session.set('clientSecret', client_secret);\n\n          location.href = await getAuthorizationURL({\n            instanceURL,\n            client_id,\n          });\n        } else {\n          alert('Failed to register application');\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  return (\n    <main id=\"login\" style={{ textAlign: 'center' }}>\n      <form onSubmit={onSubmit}>\n        <h1>Log in</h1>\n        <label>\n          <p>Instance</p>\n          <input\n            required\n            type=\"text\"\n            class=\"large\"\n            id=\"instanceURL\"\n            ref={instanceURLRef}\n            disabled={uiState === 'loading'}\n            list=\"instances-list\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            autocomplete=\"off\"\n            spellcheck={false}\n          />\n          <datalist id=\"instances-list\">\n            {instancesList.map((instance) => (\n              <option value={instance} />\n            ))}\n          </datalist>\n        </label>\n        {uiState === 'error' && (\n          <p class=\"error\">\n            Failed to log in. Please try again or another instance.\n          </p>\n        )}\n        <p>\n          <button class=\"large\" disabled={uiState === 'loading'}>\n            Log in\n          </button>{' '}\n        </p>\n        <Loader hidden={uiState !== 'loading'} />\n        <hr />\n        <p>\n          <a href=\"https://joinmastodon.org/servers\" target=\"_blank\">\n            Don't have an account? Create one!\n          </a>\n        </p>\n        <p>\n          <Link to=\"/\">Go home</Link>\n        </p>\n      </form>\n    </main>\n  );\n}\n\nexport default Login;\n","import './search.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Menu from '../components/menu';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nfunction Search(props) {\n  const params = useParams();\n  const { masto, instance, authenticated } = api({\n    instance: params.instance,\n  });\n  const [uiState, setUiState] = useState('default');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchFieldRef = useRef();\n  const q = props?.query || searchParams.get('q');\n  useTitle(q ? `Search: ${q}` : 'Search', `/search`);\n\n  const [statusResults, setStatusResults] = useState([]);\n  const [accountResults, setAccountResults] = useState([]);\n  const [hashtagResults, setHashtagResults] = useState([]);\n  useEffect(() => {\n    searchFieldRef.current?.focus?.();\n    if (q) {\n      searchFieldRef.current.value = q;\n\n      setUiState('loading');\n      (async () => {\n        const results = await masto.v2.search({\n          q,\n          limit: 20,\n          resolve: authenticated,\n        });\n        console.log(results);\n        setStatusResults(results.statuses);\n        setAccountResults(results.accounts);\n        setHashtagResults(results.hashtags);\n        setUiState('default');\n      })();\n    }\n  }, [q, instance]);\n\n  return (\n    <div id=\"search-page\" class=\"deck-container\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <Menu />\n            </div>\n            <form\n              onSubmit={(e) => {\n                e.preventDefault();\n                const { q } = e.target;\n                if (q.value) {\n                  setSearchParams({ q: q.value });\n                } else {\n                  setSearchParams({});\n                }\n              }}\n            >\n              <input\n                ref={searchFieldRef}\n                name=\"q\"\n                type=\"search\"\n                autofocus\n                placeholder=\"Search\"\n                onSearch={(e) => {\n                  if (!e.target.value) {\n                    setSearchParams({});\n                  }\n                }}\n              />\n            </form>\n            <div class=\"header-side\" />\n          </div>\n        </header>\n        <main>\n          {!!q && uiState !== 'loading' ? (\n            <>\n              <h2 class=\"timeline-header\">Accounts</h2>\n              {accountResults.length > 0 ? (\n                <ul class=\"timeline flat accounts-list\">\n                  {accountResults.map((account) => (\n                    <li>\n                      <AccountBlock account={account} instance={instance} />\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <p class=\"ui-state\">No accounts found.</p>\n              )}\n              <h2 class=\"timeline-header\">Hashtags</h2>\n              {hashtagResults.length > 0 ? (\n                <ul class=\"link-list hashtag-list\">\n                  {hashtagResults.map((hashtag) => (\n                    <li>\n                      <Link\n                        to={\n                          instance\n                            ? `/${instance}/t/${hashtag.name}`\n                            : `/t/${hashtag.name}`\n                        }\n                      >\n                        <Icon icon=\"hashtag\" />\n                        <span>{hashtag.name}</span>\n                      </Link>\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <p class=\"ui-state\">No hashtags found.</p>\n              )}\n              <h2 class=\"timeline-header\">Posts</h2>\n              {statusResults.length > 0 ? (\n                <ul class=\"timeline\">\n                  {statusResults.map((status) => (\n                    <li>\n                      <Link\n                        class=\"status-link\"\n                        to={\n                          instance\n                            ? `/${instance}/s/${status.id}`\n                            : `/s/${status.id}`\n                        }\n                      >\n                        <Status status={status} />\n                      </Link>\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <p class=\"ui-state\">No posts found.</p>\n              )}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : (\n            <p class=\"ui-state\">\n              Enter your search term or paste a URL above to get started.\n            </p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","export default \"__VITE_ASSET__c2b3a5f0__\"","import './settings.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useReducer, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport logo from '../assets/logo.svg';\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport NameText from '../components/name-text';\nimport RelativeTime from '../components/relative-time';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\n/*\n  Settings component that shows these settings:\n  - Accounts list for switching\n  - Dark/light/auto theme switch (done with adding/removing 'is-light' or 'is-dark' class on the body)\n*/\n\nfunction Settings({ onClose }) {\n  const { masto } = api();\n  const snapStates = useSnapshot(states);\n  // Accounts\n  const accounts = store.local.getJSON('accounts');\n  const currentAccount = store.session.get('currentAccount');\n  const currentTheme = store.local.get('theme') || 'auto';\n  const themeFormRef = useRef();\n  const moreThanOneAccount = accounts.length > 1;\n  const [currentDefault, setCurrentDefault] = useState(0);\n\n  const [_, reload] = useReducer((x) => x + 1, 0);\n\n  return (\n    <div id=\"settings-container\" class=\"sheet\" tabIndex=\"-1\">\n      <main>\n        {/* <button type=\"button\" class=\"close-button plain large\" onClick={onClose}>\n        <Icon icon=\"x\" alt=\"Close\" />\n      </button> */}\n        <h2>Accounts</h2>\n        <section>\n          <ul class=\"accounts-list\">\n            {accounts.map((account, i) => {\n              const isCurrent = account.info.id === currentAccount;\n              const isDefault = i === (currentDefault || 0);\n              return (\n                <li key={i + account.id}>\n                  <div>\n                    {moreThanOneAccount && (\n                      <span class={`current ${isCurrent ? 'is-current' : ''}`}>\n                        <Icon icon=\"check-circle\" alt=\"Current\" />\n                      </span>\n                    )}\n                    <Avatar\n                      url={account.info.avatarStatic}\n                      size=\"xxl\"\n                      onDblClick={async () => {\n                        if (isCurrent) {\n                          try {\n                            const info = await masto.v1.accounts.fetch(\n                              account.info.id,\n                            );\n                            console.log('fetched account info', info);\n                            account.info = info;\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          } catch (e) {}\n                        }\n                      }}\n                    />\n                    <NameText\n                      account={account.info}\n                      showAcct\n                      onClick={() => {\n                        states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                      }}\n                    />\n                  </div>\n                  <div class=\"actions\">\n                    {isDefault && moreThanOneAccount && (\n                      <>\n                        <span class=\"tag\">Default</span>{' '}\n                      </>\n                    )}\n                    {!isCurrent && (\n                      <button\n                        type=\"button\"\n                        class=\"light\"\n                        onClick={() => {\n                          store.session.set('currentAccount', account.info.id);\n                          location.reload();\n                        }}\n                      >\n                        <Icon icon=\"transfer\" /> Switch\n                      </button>\n                    )}\n                    <Menu\n                      align=\"end\"\n                      menuButton={\n                        <button\n                          type=\"button\"\n                          title=\"More\"\n                          class=\"plain more-button\"\n                        >\n                          <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                        </button>\n                      }\n                    >\n                      {moreThanOneAccount && (\n                        <MenuItem\n                          disabled={isDefault}\n                          onClick={() => {\n                            // Move account to the top of the list\n                            accounts.splice(i, 1);\n                            accounts.unshift(account);\n                            store.local.setJSON('accounts', accounts);\n                            setCurrentDefault(i);\n                          }}\n                        >\n                          Set as default\n                        </MenuItem>\n                      )}\n                      <MenuItem\n                        disabled={!isCurrent}\n                        onClick={() => {\n                          const yes = confirm('Log out?');\n                          if (!yes) return;\n                          accounts.splice(i, 1);\n                          store.local.setJSON('accounts', accounts);\n                          // location.reload();\n                          location.href = '/';\n                        }}\n                      >\n                        Log out\n                      </MenuItem>\n                    </Menu>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          {moreThanOneAccount && (\n            <p>\n              <small>\n                Note: <i>Default</i> account will always be used for first load.\n                Switched accounts will persist during the session.\n              </small>\n            </p>\n          )}\n          <p style={{ textAlign: 'end' }}>\n            <Link to=\"/login\" class=\"button\" onClick={onClose}>\n              Add new account\n            </Link>\n          </p>\n        </section>\n        <h2>Settings</h2>\n        <ul class=\"section\">\n          <li>\n            <div>\n              <label>Appearance</label>\n            </div>\n            <div>\n              <form\n                ref={themeFormRef}\n                onInput={(e) => {\n                  console.log(e);\n                  e.preventDefault();\n                  const formData = new FormData(themeFormRef.current);\n                  const theme = formData.get('theme');\n                  const html = document.documentElement;\n\n                  if (theme === 'auto') {\n                    html.classList.remove('is-light', 'is-dark');\n                  } else {\n                    html.classList.toggle('is-light', theme === 'light');\n                    html.classList.toggle('is-dark', theme === 'dark');\n                  }\n                  document\n                    .querySelector('meta[name=\"color-scheme\"]')\n                    .setAttribute(\n                      'content',\n                      theme === 'auto' ? 'dark light' : theme,\n                    );\n\n                  if (theme === 'auto') {\n                    store.local.del('theme');\n                  } else {\n                    store.local.set('theme', theme);\n                  }\n                }}\n              >\n                <div class=\"radio-group\">\n                  <label>\n                    <input\n                      type=\"radio\"\n                      name=\"theme\"\n                      value=\"light\"\n                      defaultChecked={currentTheme === 'light'}\n                    />\n                    <span>Light</span>\n                  </label>\n                  <label>\n                    <input\n                      type=\"radio\"\n                      name=\"theme\"\n                      value=\"dark\"\n                      defaultChecked={currentTheme === 'dark'}\n                    />\n                    <span>Dark</span>\n                  </label>\n                  <label>\n                    <input\n                      type=\"radio\"\n                      name=\"theme\"\n                      value=\"auto\"\n                      defaultChecked={\n                        currentTheme !== 'light' && currentTheme !== 'dark'\n                      }\n                    />\n                    <span>Auto</span>\n                  </label>\n                </div>\n              </form>\n            </div>\n          </li>\n          <li>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={snapStates.settings.boostsCarousel}\n                onChange={(e) => {\n                  states.settings.boostsCarousel = e.target.checked;\n                }}\n              />{' '}\n              Boosts carousel (experimental)\n            </label>\n          </li>\n        </ul>\n        <h2>Hidden features</h2>\n        <section>\n          <div>\n            <button\n              type=\"button\"\n              class=\"light\"\n              onClick={() => {\n                states.showDrafts = true;\n                states.showSettings = false;\n              }}\n            >\n              Unsent drafts\n            </button>\n          </div>\n        </section>\n        <h2>About</h2>\n        <section>\n          <p>\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"20\"\n              height=\"20\"\n              style={{\n                aspectRatio: '1/1',\n                verticalAlign: 'middle',\n              }}\n            />{' '}\n            <a\n              href=\"https://hachyderm.io/@phanpy\"\n              // target=\"_blank\"\n              onClick={(e) => {\n                e.preventDefault();\n                states.showAccount = 'phanpy@hachyderm.io';\n              }}\n            >\n              @phanpy\n            </a>\n            .\n          </p>\n          <p>\n            <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n              Built\n            </a>{' '}\n            by{' '}\n            <a\n              href=\"https://mastodon.social/@cheeaun\"\n              // target=\"_blank\"\n              onClick={(e) => {\n                e.preventDefault();\n                states.showAccount = 'cheeaun@mastodon.social';\n              }}\n            >\n              @cheeaun\n            </a>\n            .{' '}\n            <a\n              href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n              target=\"_blank\"\n            >\n              Privacy Policy\n            </a>\n            .\n          </p>\n          {__BUILD_TIME__ && (\n            <p>\n              Last build: <RelativeTime datetime={new Date(__BUILD_TIME__)} />{' '}\n              {__COMMIT_HASH__ && (\n                <>\n                  (\n                  <a\n                    href={`https://github.com/cheeaun/phanpy/commit/${__COMMIT_HASH__}`}\n                    target=\"_blank\"\n                  >\n                    <code>{__COMMIT_HASH__}</code>\n                  </a>\n                  )\n                </>\n              )}\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Settings;\n","import './status.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport debounce from 'just-debounce-it';\nimport pRetry from 'p-retry';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { matchPath, useNavigate, useParams } from 'react-router-dom';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NameText from '../components/name-text';\nimport RelativeTime from '../components/relative-time';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport htmlContentLength from '../utils/html-content-length';\nimport shortenNumber from '../utils/shorten-number';\nimport states, {\n  saveStatus,\n  statusKey,\n  threadifyStatus,\n} from '../utils/states';\nimport { getCurrentAccount } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 40;\nconst THREAD_LIMIT = 20;\n\nlet cachedStatusesMap = {};\nfunction resetScrollPosition(id) {\n  delete cachedStatusesMap[id];\n  delete states.scrollPositions[id];\n}\n\nfunction StatusPage() {\n  const { id, ...params } = useParams();\n  const { masto, instance } = api({ instance: params.instance });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n  const navigate = useNavigate();\n  const snapStates = useSnapshot(states);\n  const [statuses, setStatuses] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const heroStatusRef = useRef();\n  const sKey = statusKey(id, instance);\n\n  const scrollableRef = useRef();\n  useEffect(() => {\n    scrollableRef.current?.focus();\n  }, []);\n  useEffect(() => {\n    const onScroll = debounce(() => {\n      // console.log('onScroll');\n      if (!scrollableRef.current) return;\n      const { scrollTop } = scrollableRef.current;\n      if (uiState !== 'loading') {\n        states.scrollPositions[id] = scrollTop;\n      }\n    }, 50);\n    scrollableRef.current.addEventListener('scroll', onScroll, {\n      passive: true,\n    });\n    onScroll();\n    return () => {\n      onScroll.cancel();\n      scrollableRef.current?.removeEventListener('scroll', onScroll);\n    };\n  }, [id, uiState !== 'loading']);\n\n  const scrollOffsets = useRef();\n  const initContext = () => {\n    console.debug('initContext', id);\n    setUIState('loading');\n    let heroTimer;\n\n    const cachedStatuses = cachedStatusesMap[id];\n    if (cachedStatuses) {\n      // Case 1: It's cached, let's restore them to make it snappy\n      const reallyCachedStatuses = cachedStatuses.filter(\n        (s) => states.statuses[sKey],\n        // Some are not cached in the global state, so we need to filter them out\n      );\n      setStatuses(reallyCachedStatuses);\n    } else {\n      // const heroIndex = statuses.findIndex((s) => s.id === id);\n      // if (heroIndex !== -1) {\n      //   // Case 2: It's in current statuses. Slice off all descendant statuses after the hero status to be safe\n      //   const slicedStatuses = statuses.slice(0, heroIndex + 1);\n      //   setStatuses(slicedStatuses);\n      // } else {\n      // Case 3: Not cached and not in statuses, let's start from scratch\n      setStatuses([{ id }]);\n      // }\n    }\n\n    (async () => {\n      const heroFetch = () =>\n        pRetry(() => masto.v1.statuses.fetch(id), {\n          retries: 4,\n        });\n      const contextFetch = pRetry(() => masto.v1.statuses.fetchContext(id), {\n        retries: 8,\n      });\n\n      const hasStatus = !!snapStates.statuses[sKey];\n      let heroStatus = snapStates.statuses[sKey];\n      if (hasStatus) {\n        console.debug('Hero status is cached');\n      } else {\n        try {\n          heroStatus = await heroFetch();\n          saveStatus(heroStatus, instance);\n          // Give time for context to appear\n          await new Promise((resolve) => {\n            setTimeout(resolve, 100);\n          });\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n          return;\n        }\n      }\n\n      try {\n        const context = await contextFetch;\n        const { ancestors, descendants } = context;\n\n        ancestors.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n        });\n        const nestedDescendants = [];\n        descendants.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n          if (status.inReplyToAccountId === status.account.id) {\n            // If replying to self, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else if (status.inReplyToId === heroStatus.id) {\n            // If replying to the hero status, it's a reply, level 1\n            nestedDescendants.push(status);\n          } else {\n            // If replying to someone else, it's a reply to a reply, level 2\n            const parent = descendants.find((s) => s.id === status.inReplyToId);\n            if (parent) {\n              if (!parent.__replies) {\n                parent.__replies = [];\n              }\n              parent.__replies.push(status);\n            } else {\n              // If no parent, something is wrong\n              console.warn('No parent found for', status);\n            }\n          }\n        });\n\n        console.log({ ancestors, descendants, nestedDescendants });\n\n        const allStatuses = [\n          ...ancestors.map((s) => ({\n            id: s.id,\n            ancestor: true,\n            accountID: s.account.id,\n          })),\n          { id, accountID: heroStatus.account.id },\n          ...nestedDescendants.map((s) => ({\n            id: s.id,\n            accountID: s.account.id,\n            descendant: true,\n            thread: s.account.id === heroStatus.account.id,\n            replies: s.__replies?.map((r) => ({\n              id: r.id,\n              account: r.account,\n              repliesCount: r.repliesCount,\n              content: r.content,\n              replies: r.__replies?.map((r2) => ({\n                // Level 3\n                id: r2.id,\n                account: r2.account,\n                repliesCount: r2.repliesCount,\n                content: r2.content,\n                replies: r2.__replies?.map((r3) => ({\n                  // Level 4\n                  id: r3.id,\n                  account: r3.account,\n                  repliesCount: r3.repliesCount,\n                  content: r3.content,\n                })),\n              })),\n            })),\n          })),\n        ];\n\n        setUIState('default');\n        scrollOffsets.current = {\n          offsetTop: heroStatusRef.current?.offsetTop,\n          scrollTop: scrollableRef.current?.scrollTop,\n        };\n        console.log({ allStatuses });\n        setStatuses(allStatuses);\n        cachedStatusesMap[id] = allStatuses;\n\n        // Let's threadify this one\n        // Note that all non-hero statuses will trigger saveStatus which will threadify them too\n        // By right, at this point, all descendant statuses should be cached\n        threadifyStatus(heroStatus, instance);\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    return () => {\n      clearTimeout(heroTimer);\n    };\n  };\n\n  useEffect(initContext, [id, masto]);\n  useEffect(() => {\n    if (!statuses.length) return;\n    console.debug('STATUSES', statuses);\n    const scrollPosition = states.scrollPositions[id];\n    console.debug('scrollPosition', scrollPosition);\n    if (!!scrollPosition) {\n      console.debug('Case 1', {\n        id,\n        scrollPosition,\n      });\n      scrollableRef.current.scrollTop = scrollPosition;\n    } else if (scrollOffsets.current) {\n      const newScrollOffsets = {\n        offsetTop: heroStatusRef.current?.offsetTop,\n        scrollTop: scrollableRef.current?.scrollTop,\n      };\n      const newScrollTop =\n        newScrollOffsets.offsetTop -\n        scrollOffsets.current.offsetTop +\n        newScrollOffsets.scrollTop;\n      console.debug('Case 2', {\n        scrollOffsets: scrollOffsets.current,\n        newScrollOffsets,\n        newScrollTop,\n        statuses: [...statuses],\n      });\n      scrollableRef.current.scrollTop = newScrollTop;\n    } else if (statuses.length === 1) {\n      console.debug('Case 3', {\n        id,\n      });\n      scrollableRef.current.scrollTop = 0;\n    }\n\n    // RESET\n    scrollOffsets.current = null;\n  }, [statuses]);\n\n  useEffect(() => {\n    if (snapStates.reloadStatusPage <= 0) return;\n    // Delete the cache for the context\n    (async () => {\n      try {\n        const { instanceURL } = getCurrentAccount();\n        const contextURL = `https://${instanceURL}/api/v1/statuses/${id}/context`;\n        console.log('Clear cache', contextURL);\n        const apiCache = await caches.open('api');\n        await apiCache.delete(contextURL, { ignoreVary: true });\n\n        return initContext();\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [snapStates.reloadStatusPage]);\n\n  useEffect(() => {\n    return () => {\n      // RESET\n      states.scrollPositions = {};\n      states.reloadStatusPage = 0;\n      cachedStatusesMap = {};\n    };\n  }, []);\n\n  const heroStatus = snapStates.statuses[sKey] || snapStates.statuses[id];\n  const heroDisplayName = useMemo(() => {\n    // Remove shortcodes from display name\n    if (!heroStatus) return '';\n    const { account } = heroStatus;\n    const div = document.createElement('div');\n    div.innerHTML = account.displayName;\n    return div.innerText.trim();\n  }, [heroStatus]);\n  const heroContentText = useMemo(() => {\n    if (!heroStatus) return '';\n    const { spoilerText, content } = heroStatus;\n    let text;\n    if (spoilerText) {\n      text = spoilerText;\n    } else {\n      const div = document.createElement('div');\n      div.innerHTML = content;\n      text = div.innerText.trim();\n    }\n    if (text.length > 64) {\n      // \"The title should ideally be less than 64 characters in length\"\n      // https://www.w3.org/Provider/Style/TITLE.html\n      text = text.slice(0, 64) + '…';\n    }\n    return text;\n  }, [heroStatus]);\n  useTitle(\n    heroDisplayName && heroContentText\n      ? `${heroDisplayName}: \"${heroContentText}\"`\n      : 'Status',\n    '/:instance?/s/:id',\n  );\n\n  const closeLink = useMemo(() => {\n    const { prevLocation } = snapStates;\n    const pathname =\n      (prevLocation?.pathname || '') + (prevLocation?.search || '');\n    if (\n      !pathname ||\n      matchPath('/:instance/s/:id', pathname) ||\n      matchPath('/s/:id', pathname)\n    ) {\n      return '/';\n    }\n    return pathname;\n  }, []);\n  const onClose = () => {\n    states.showMediaModal = false;\n  };\n\n  const [limit, setLimit] = useState(LIMIT);\n  const showMore = useMemo(() => {\n    // return number of statuses to show\n    return statuses.length - limit;\n  }, [statuses.length, limit]);\n\n  const hasManyStatuses = statuses.length > THREAD_LIMIT;\n  const hasDescendants = statuses.some((s) => s.descendant);\n  const ancestors = statuses.filter((s) => s.ancestor);\n\n  const [heroInView, setHeroInView] = useState(true);\n  const onView = useDebouncedCallback(setHeroInView, 100);\n  const heroPointer = useMemo(() => {\n    // get top offset of heroStatus\n    if (!heroStatusRef.current || heroInView) return null;\n    const { top } = heroStatusRef.current.getBoundingClientRect();\n    return top > 0 ? 'down' : 'up';\n  }, [heroInView]);\n\n  useHotkeys(['esc', 'backspace'], () => {\n    // location.hash = closeLink;\n    onClose();\n    navigate(closeLink);\n  });\n\n  useHotkeys('j', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      // Select all statuses except those inside collapsed details/summary\n      // Hat-tip to @AmeliaBR@front-end.social\n      // https://front-end.social/@AmeliaBR/109784776146144471\n      scrollableRef.current.querySelectorAll(\n        '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)',\n      ),\n    );\n    console.log({ allStatusLinks });\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\n      if (nextStatus) {\n        nextStatus.focus();\n        nextStatus.scrollIntoViewIfNeeded?.();\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoViewIfNeeded?.();\n      }\n    }\n  });\n\n  useHotkeys('k', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(\n        '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)',\n      ),\n    );\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\n      if (prevStatus) {\n        prevStatus.focus();\n        prevStatus.scrollIntoViewIfNeeded?.();\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoViewIfNeeded?.();\n      }\n    }\n  });\n\n  // NOTE: I'm not sure if 'x' is the best shortcut for this, might change it later\n  // IDEA: x is for expand\n  useHotkeys('x', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    if (activeStatus) {\n      const details = activeStatus.nextElementSibling;\n      if (details && details.tagName.toLowerCase() === 'details') {\n        details.open = !details.open;\n      }\n    }\n  });\n\n  const { nearReachStart } = useScroll({\n    scrollableElement: scrollableRef.current,\n    distanceFromStartPx: 16,\n  });\n\n  return (\n    <div class=\"deck-backdrop\">\n      <Link to={closeLink} onClick={onClose}></Link>\n      <div\n        tabIndex=\"-1\"\n        ref={scrollableRef}\n        class={`status-deck deck contained ${\n          statuses.length > 1 ? 'padded-bottom' : ''\n        }`}\n      >\n        <header\n          class={`${heroInView ? 'inview' : ''}`}\n          onDblClick={(e) => {\n            // reload statuses\n            states.reloadStatusPage++;\n          }}\n        >\n          {/* <div>\n            <Link class=\"button plain deck-close\" href={closeLink}>\n              <Icon icon=\"chevron-left\" size=\"xl\" />\n            </Link>\n          </div> */}\n          <div class=\"header-grid header-grid-2\">\n            <h1>\n              {!heroInView && heroStatus && uiState !== 'loading' ? (\n                <>\n                  <span class=\"hero-heading\">\n                    <NameText\n                      account={heroStatus.account}\n                      instance={instance}\n                      showAvatar\n                      short\n                    />{' '}\n                    <span class=\"insignificant\">\n                      &bull;{' '}\n                      <RelativeTime\n                        datetime={heroStatus.createdAt}\n                        format=\"micro\"\n                      />\n                    </span>\n                  </span>{' '}\n                  <button\n                    type=\"button\"\n                    class=\"ancestors-indicator light small\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      heroStatusRef.current.scrollIntoView({\n                        behavior: 'smooth',\n                        block: 'start',\n                      });\n                    }}\n                  >\n                    <Icon\n                      icon={heroPointer === 'down' ? 'arrow-down' : 'arrow-up'}\n                    />\n                  </button>\n                </>\n              ) : (\n                <>\n                  Status{' '}\n                  <button\n                    type=\"button\"\n                    class=\"ancestors-indicator light small\"\n                    onClick={(e) => {\n                      // Scroll to top\n                      e.preventDefault();\n                      e.stopPropagation();\n                      scrollableRef.current.scrollTo({\n                        top: 0,\n                        behavior: 'smooth',\n                      });\n                    }}\n                    hidden={!ancestors.length || nearReachStart}\n                  >\n                    <Icon icon=\"arrow-up\" />\n                    <Icon icon=\"comment\" />{' '}\n                    <span class=\"insignificant\">\n                      {shortenNumber(ancestors.length)}\n                    </span>\n                  </button>\n                </>\n              )}\n            </h1>\n            <div class=\"header-side\">\n              {uiState === 'loading' ? (\n                <Loader abrupt />\n              ) : (\n                <Menu\n                  align=\"end\"\n                  portal={{\n                    // Need this, else the menu click will cause scroll jump\n                    target: scrollableRef.current,\n                  }}\n                  menuButton={\n                    <button type=\"button\" class=\"button plain4\">\n                      <Icon icon=\"more\" alt=\"Actions\" size=\"xl\" />\n                    </button>\n                  }\n                >\n                  <MenuItem\n                    onClick={() => {\n                      // Click all buttons with class .spoiler but not .spoiling\n                      const buttons = Array.from(\n                        scrollableRef.current.querySelectorAll(\n                          'button.spoiler:not(.spoiling)',\n                        ),\n                      );\n                      buttons.forEach((button) => {\n                        button.click();\n                      });\n                    }}\n                  >\n                    <Icon icon=\"eye-open\" />{' '}\n                    <span>Show all sensitive content</span>\n                  </MenuItem>\n                </Menu>\n              )}\n              <Link\n                class=\"button plain deck-close\"\n                to={closeLink}\n                onClick={onClose}\n              >\n                <Icon icon=\"x\" size=\"xl\" />\n              </Link>\n            </div>\n          </div>\n        </header>\n        {!!statuses.length && heroStatus ? (\n          <ul\n            class={`timeline flat contextual grow ${\n              uiState === 'loading' ? 'loading' : ''\n            }`}\n          >\n            {statuses.slice(0, limit).map((status) => {\n              const {\n                id: statusID,\n                ancestor,\n                descendant,\n                thread,\n                replies,\n              } = status;\n              const isHero = statusID === id;\n              return (\n                <li\n                  key={statusID}\n                  ref={isHero ? heroStatusRef : null}\n                  class={`${ancestor ? 'ancestor' : ''} ${\n                    descendant ? 'descendant' : ''\n                  } ${thread ? 'thread' : ''} ${isHero ? 'hero' : ''}`}\n                >\n                  {isHero ? (\n                    <>\n                      <InView\n                        threshold={0.1}\n                        onChange={onView}\n                        class=\"status-focus\"\n                        tabIndex={0}\n                      >\n                        <Status\n                          statusID={statusID}\n                          instance={instance}\n                          withinContext\n                          size=\"l\"\n                        />\n                      </InView>\n                      {uiState !== 'loading' && !authenticated ? (\n                        <div class=\"post-status-banner\">\n                          <p>\n                            You're not logged in. Interactions (reply, boost,\n                            etc) are not possible.\n                          </p>\n                          <Link to=\"/login\" class=\"button\">\n                            Log in\n                          </Link>\n                        </div>\n                      ) : (\n                        !sameInstance && (\n                          <div class=\"post-status-banner\">\n                            <p>\n                              This post is from another instance (\n                              <b>{instance}</b>). Interactions (reply, boost,\n                              etc) are not possible.\n                            </p>\n                            <button\n                              type=\"button\"\n                              onClick={() => {\n                                (async () => {\n                                  try {\n                                    const results =\n                                      await currentMasto.v2.search({\n                                        q: heroStatus.url,\n                                        type: 'statuses',\n                                        resolve: true,\n                                        limit: 1,\n                                      });\n                                    if (results.statuses.length) {\n                                      const status = results.statuses[0];\n                                      navigate(\n                                        currentInstance\n                                          ? `/${currentInstance}/s/${status.id}`\n                                          : `/s/${status.id}`,\n                                      );\n                                    } else {\n                                      throw new Error('No results');\n                                    }\n                                  } catch (e) {\n                                    alert('Error: ' + e);\n                                    console.error(e);\n                                  }\n                                })();\n                              }}\n                            >\n                              <Icon icon=\"transfer\" /> Switch to my instance to\n                              enable interactions\n                            </button>\n                          </div>\n                        )\n                      )}\n                    </>\n                  ) : (\n                    <Link\n                      class=\"status-link\"\n                      to={\n                        instance\n                          ? `/${instance}/s/${statusID}`\n                          : `/s/${statusID}`\n                      }\n                      onClick={() => {\n                        resetScrollPosition(statusID);\n                      }}\n                    >\n                      <Status\n                        statusID={statusID}\n                        instance={instance}\n                        withinContext\n                        size={thread || ancestor ? 'm' : 's'}\n                      />\n                      {/* {replies?.length > LIMIT && (\n                        <div class=\"replies-link\">\n                          <Icon icon=\"comment\" />{' '}\n                          <span title={replies.length}>\n                            {shortenNumber(replies.length)}\n                          </span>\n                        </div>\n                      )} */}\n                    </Link>\n                  )}\n                  {descendant && replies?.length > 0 && (\n                    <SubComments\n                      instance={instance}\n                      hasManyStatuses={hasManyStatuses}\n                      replies={replies}\n                      hasParentThread={thread}\n                    />\n                  )}\n                  {uiState === 'loading' &&\n                    isHero &&\n                    !!heroStatus?.repliesCount &&\n                    !hasDescendants && (\n                      <div class=\"status-loading\">\n                        <Loader />\n                      </div>\n                    )}\n                  {uiState === 'error' &&\n                    isHero &&\n                    !!heroStatus?.repliesCount &&\n                    !hasDescendants && (\n                      <div class=\"status-error\">\n                        Unable to load replies.\n                        <br />\n                        <button\n                          type=\"button\"\n                          class=\"plain\"\n                          onClick={() => {\n                            states.reloadStatusPage++;\n                          }}\n                        >\n                          Try again\n                        </button>\n                      </div>\n                    )}\n                </li>\n              );\n            })}\n            {showMore > 0 && (\n              <li>\n                <button\n                  type=\"button\"\n                  class=\"plain block\"\n                  disabled={uiState === 'loading'}\n                  onClick={() => setLimit((l) => l + LIMIT)}\n                  style={{ marginBlockEnd: '6em' }}\n                >\n                  Show more&hellip;{' '}\n                  <span class=\"tag\">\n                    {showMore > LIMIT ? `${LIMIT}+` : showMore}\n                  </span>\n                </button>\n              </li>\n            )}\n          </ul>\n        ) : (\n          <>\n            {uiState === 'loading' && (\n              <ul class=\"timeline flat contextual grow loading\">\n                <li>\n                  <Status skeleton size=\"l\" />\n                </li>\n              </ul>\n            )}\n            {uiState === 'error' && (\n              <p class=\"ui-state\">\n                Unable to load status\n                <br />\n                <br />\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    states.reloadStatusPage++;\n                  }}\n                >\n                  Try again\n                </button>\n              </p>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction SubComments({ hasManyStatuses, replies, instance, hasParentThread }) {\n  // Set isBrief = true:\n  // - if less than or 2 replies\n  // - if replies have no sub-replies\n  // - if total number of characters of content from replies is less than 500\n  let isBrief = false;\n  if (replies.length <= 2) {\n    const containsSubReplies = replies.some(\n      (r) => r.repliesCount > 0 || r.replies?.length > 0,\n    );\n    if (!containsSubReplies) {\n      let totalLength = replies.reduce((acc, reply) => {\n        const { content } = reply;\n        const length = htmlContentLength(content);\n        return acc + length;\n      }, 0);\n      isBrief = totalLength < 500;\n    }\n  }\n\n  // Total comments count, including sub-replies\n  const diveDeep = (replies) => {\n    return replies.reduce((acc, reply) => {\n      const { repliesCount, replies } = reply;\n      const count = replies?.length || repliesCount;\n      return acc + count + diveDeep(replies || []);\n    }, 0);\n  };\n  const totalComments = replies.length + diveDeep(replies);\n  const sameCount = replies.length === totalComments;\n\n  // Get the first 3 accounts, unique by id\n  const accounts = replies\n    .map((r) => r.account)\n    .filter((a, i, arr) => arr.findIndex((b) => b.id === a.id) === i)\n    .slice(0, 3);\n\n  const open =\n    (!hasParentThread || replies.length === 1) && (isBrief || !hasManyStatuses);\n\n  return (\n    <details class=\"replies\" open={open}>\n      <summary hidden={open}>\n        <span class=\"avatars\">\n          {accounts.map((a) => (\n            <Avatar\n              key={a.id}\n              url={a.avatarStatic}\n              title={`${a.displayName} @${a.username}`}\n            />\n          ))}\n        </span>\n        <span>\n          <span title={replies.length}>{shortenNumber(replies.length)}</span>{' '}\n          repl\n          {replies.length === 1 ? 'y' : 'ies'}\n        </span>\n        {!sameCount && totalComments > 1 && (\n          <>\n            {' '}\n            &middot;{' '}\n            <span>\n              <span title={totalComments}>{shortenNumber(totalComments)}</span>{' '}\n              comment\n              {totalComments === 1 ? '' : 's'}\n            </span>\n          </>\n        )}\n      </summary>\n      <ul>\n        {replies.map((r) => (\n          <li key={r.id}>\n            <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`}\n              onClick={() => {\n                resetScrollPosition(r.id);\n              }}\n            >\n              <Status\n                statusID={r.id}\n                instance={instance}\n                withinContext\n                size=\"s\"\n              />\n              {!r.replies?.length && r.repliesCount > 0 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment\" />{' '}\n                  <span title={r.repliesCount}>\n                    {shortenNumber(r.repliesCount)}\n                  </span>\n                </div>\n              )}\n            </Link>\n            {r.replies?.length && (\n              <SubComments\n                instance={instance}\n                hasManyStatuses={hasManyStatuses}\n                replies={r.replies}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </details>\n  );\n}\n\nexport default StatusPage;\n","import './welcome.css';\n\nimport logo from '../assets/logo.svg';\nimport Link from '../components/link';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Welcome() {\n  useTitle(null, ['/', '/welcome']);\n  return (\n    <main id=\"welcome\">\n      <h1>\n        <img\n          src={logo}\n          alt=\"\"\n          width=\"24\"\n          height=\"24\"\n          style={{\n            aspectRatio: '1/1',\n          }}\n        />{' '}\n        Phanpy\n      </h1>\n      <h2>\n        Trunk-tastic\n        <br />\n        Mastodon Experience\n      </h2>\n      <p>A minimalistic opinionated Mastodon web client.</p>\n      <p>\n        <big>\n          <b>\n            <Link to=\"/login\" class=\"button\">\n              Log in\n            </Link>\n          </b>\n        </big>\n      </p>\n      <hr />\n      <p>\n        <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n          Built\n        </a>{' '}\n        by{' '}\n        <a\n          href=\"https://mastodon.social/@cheeaun\"\n          target=\"_blank\"\n          onClick={(e) => {\n            e.preventDefault();\n            states.showAccount = 'cheeaun@mastodon.social';\n          }}\n        >\n          @cheeaun\n        </a>\n        .{' '}\n        <a\n          href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n          target=\"_blank\"\n        >\n          Privacy Policy\n        </a>\n        .\n      </p>\n    </main>\n  );\n}\n\nexport default Welcome;\n","import './app.css';\n\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport {\n  matchPath,\n  Route,\n  Routes,\n  useLocation,\n  useNavigate,\n} from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Account from './components/account';\nimport Compose from './components/compose';\nimport Drafts from './components/drafts';\nimport Icon from './components/icon';\nimport Link from './components/link';\nimport Loader from './components/loader';\nimport MediaModal from './components/media-modal';\nimport Modal from './components/modal';\nimport Shortcuts from './components/shortcuts';\nimport ShortcutsSettings from './components/shortcuts-settings';\nimport NotFound from './pages/404';\nimport AccountStatuses from './pages/account-statuses';\nimport Bookmarks from './pages/bookmarks';\nimport Favourites from './pages/favourites';\nimport FollowedHashtags from './pages/followed-hashtags';\nimport Following from './pages/following';\nimport Hashtag from './pages/hashtag';\nimport Home from './pages/home';\nimport HomeV1 from './pages/home-v1';\nimport List from './pages/list';\nimport Lists from './pages/lists';\nimport Login from './pages/login';\nimport Notifications from './pages/notifications';\nimport Public from './pages/public';\nimport Search from './pages/search';\nimport Settings from './pages/settings';\nimport Status from './pages/status';\nimport Welcome from './pages/welcome';\nimport {\n  api,\n  initAccount,\n  initClient,\n  initInstance,\n  initPreferences,\n} from './utils/api';\nimport { getAccessToken } from './utils/auth';\nimport showToast from './utils/show-toast';\nimport states, { getStatus, saveStatus } from './utils/states';\nimport store from './utils/store';\nimport { getCurrentAccount } from './utils/store-utils';\nimport usePageVisibility from './utils/usePageVisibility';\n\nwindow.__STATES__ = states;\n\nfunction App() {\n  const snapStates = useSnapshot(states);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [uiState, setUIState] = useState('loading');\n  const navigate = useNavigate();\n\n  useLayoutEffect(() => {\n    const theme = store.local.get('theme');\n    if (theme) {\n      document.documentElement.classList.add(`is-${theme}`);\n      document\n        .querySelector('meta[name=\"color-scheme\"]')\n        .setAttribute('content', theme === 'auto' ? 'dark light' : theme);\n    }\n  }, []);\n\n  useEffect(() => {\n    const instanceURL = store.local.get('instanceURL');\n    const code = (window.location.search.match(/code=([^&]+)/) || [])[1];\n\n    if (code) {\n      console.log({ code });\n      // Clear the code from the URL\n      window.history.replaceState({}, document.title, '/');\n\n      const clientID = store.session.get('clientID');\n      const clientSecret = store.session.get('clientSecret');\n\n      (async () => {\n        setUIState('loading');\n        const { access_token: accessToken } = await getAccessToken({\n          instanceURL,\n          client_id: clientID,\n          client_secret: clientSecret,\n          code,\n        });\n\n        const masto = initClient({ instance: instanceURL, accessToken });\n        await Promise.allSettled([\n          initInstance(masto),\n          initAccount(masto, instanceURL, accessToken),\n        ]);\n        initPreferences(masto);\n\n        setIsLoggedIn(true);\n        setUIState('default');\n      })();\n    } else {\n      const account = getCurrentAccount();\n      if (account) {\n        store.session.set('currentAccount', account.info.id);\n        const { masto } = api({ account });\n        console.log('masto', masto);\n        initPreferences(masto);\n        setUIState('loading');\n        (async () => {\n          try {\n            await initInstance(masto);\n          } catch (e) {\n          } finally {\n            setIsLoggedIn(true);\n            setUIState('default');\n          }\n        })();\n      } else {\n        setUIState('default');\n      }\n    }\n  }, []);\n\n  let location = useLocation();\n  states.currentLocation = location.pathname;\n\n  const locationDeckMap = {\n    '/': 'home-page',\n    '/notifications': 'notifications-page',\n  };\n  const focusDeck = () => {\n    let timer = setTimeout(() => {\n      const page = document.getElementById(locationDeckMap[location.pathname]);\n      console.debug('FOCUS', location.pathname, page);\n      if (page) {\n        page.focus();\n      }\n    }, 100);\n    return () => clearTimeout(timer);\n  };\n  useEffect(focusDeck, [location]);\n  const showModal =\n    snapStates.showCompose ||\n    snapStates.showSettings ||\n    snapStates.showAccount ||\n    snapStates.showDrafts ||\n    snapStates.showMediaModal ||\n    snapStates.showShortcutsSettings;\n  useEffect(() => {\n    if (!showModal) focusDeck();\n  }, [showModal]);\n\n  // useEffect(() => {\n  //   // HACK: prevent this from running again due to HMR\n  //   if (states.init) return;\n  //   if (isLoggedIn) {\n  //     requestAnimationFrame(startVisibility);\n  //     states.init = true;\n  //   }\n  // }, [isLoggedIn]);\n\n  // Notifications service\n  // - WebSocket to receive notifications when page is visible\n  const [visible, setVisible] = useState(true);\n  usePageVisibility(setVisible);\n  const notificationStream = useRef();\n  useEffect(() => {\n    if (isLoggedIn && visible) {\n      const { masto, instance } = api();\n      (async () => {\n        // 1. Get the latest notification\n        if (states.notificationsLast) {\n          const notificationsIterator = masto.v1.notifications.list({\n            limit: 1,\n            since_id: states.notificationsLast.id,\n          });\n          const { value: notifications } = await notificationsIterator.next();\n          if (notifications?.length) {\n            states.notificationsShowNew = true;\n          }\n        }\n\n        // 2. Start streaming\n        notificationStream.current = await masto.ws.stream(\n          '/api/v1/streaming',\n          {\n            stream: 'user:notification',\n          },\n        );\n        console.log('🎏 Streaming notification', notificationStream.current);\n\n        notificationStream.current.on('notification', (notification) => {\n          console.log('🔔🔔 Notification', notification);\n          if (notification.status) {\n            saveStatus(notification.status, instance, {\n              skipThreading: true,\n            });\n          }\n          states.notificationsShowNew = true;\n        });\n\n        notificationStream.current.ws.onclose = () => {\n          console.log('🔔🔔 Notification stream closed');\n        };\n      })();\n    }\n    return () => {\n      if (notificationStream.current) {\n        notificationStream.current.ws.close();\n        notificationStream.current = null;\n      }\n    };\n  }, [visible, isLoggedIn]);\n\n  const { prevLocation } = snapStates;\n  const backgroundLocation = useRef(prevLocation || null);\n  const isModalPage =\n    matchPath('/:instance/s/:id', location.pathname) ||\n    matchPath('/s/:id', location.pathname);\n  if (isModalPage) {\n    if (!backgroundLocation.current) backgroundLocation.current = prevLocation;\n  } else {\n    backgroundLocation.current = null;\n  }\n  console.debug({\n    backgroundLocation: backgroundLocation.current,\n    location,\n  });\n\n  const nonRootLocation = useMemo(() => {\n    const { pathname } = location;\n    return !/^\\/(login|welcome)/.test(pathname);\n  }, [location]);\n\n  return (\n    <>\n      <Routes location={nonRootLocation || location}>\n        <Route\n          path=\"/\"\n          element={\n            isLoggedIn ? (\n              <Home />\n            ) : uiState === 'loading' ? (\n              <Loader />\n            ) : (\n              <Welcome />\n            )\n          }\n        />\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"/welcome\" element={<Welcome />} />\n      </Routes>\n      <Routes location={backgroundLocation.current || location}>\n        {isLoggedIn && (\n          <Route path=\"/notifications\" element={<Notifications />} />\n        )}\n        {isLoggedIn && <Route path=\"/following\" element={<Following />} />}\n        {isLoggedIn && <Route path=\"/homev1\" element={<HomeV1 />} />}\n        {isLoggedIn && <Route path=\"/b\" element={<Bookmarks />} />}\n        {isLoggedIn && <Route path=\"/f\" element={<Favourites />} />}\n        {isLoggedIn && (\n          <Route path=\"/l\">\n            <Route index element={<Lists />} />\n            <Route path=\":id\" element={<List />} />\n          </Route>\n        )}\n        {isLoggedIn && <Route path=\"/ft\" element={<FollowedHashtags />} />}\n        <Route path=\"/:instance?/t/:hashtag\" element={<Hashtag />} />\n        <Route path=\"/:instance?/a/:id\" element={<AccountStatuses />} />\n        <Route path=\"/:instance?/p\">\n          <Route index element={<Public />} />\n          <Route path=\"l\" element={<Public local />} />\n        </Route>\n        <Route path=\"/:instance?/search\" element={<Search />} />\n        {/* <Route path=\"/:anything\" element={<NotFound />} /> */}\n      </Routes>\n      <Routes>\n        <Route path=\"/:instance?/s/:id\" element={<Status />} />\n      </Routes>\n      {(!snapStates.settings.shortcutsColumnsMode ||\n        snapStates.settings.shortcutsViewMode !== 'multi-column') && (\n        <Shortcuts />\n      )}\n      {!!snapStates.showCompose && (\n        <Modal>\n          <Compose\n            replyToStatus={\n              typeof snapStates.showCompose !== 'boolean'\n                ? snapStates.showCompose.replyToStatus\n                : window.__COMPOSE__?.replyToStatus || null\n            }\n            editStatus={\n              states.showCompose?.editStatus ||\n              window.__COMPOSE__?.editStatus ||\n              null\n            }\n            draftStatus={\n              states.showCompose?.draftStatus ||\n              window.__COMPOSE__?.draftStatus ||\n              null\n            }\n            onClose={(results) => {\n              const { newStatus, instance } = results || {};\n              states.showCompose = false;\n              window.__COMPOSE__ = null;\n              if (newStatus) {\n                states.reloadStatusPage++;\n                showToast({\n                  text: 'Status posted. Check it out.',\n                  delay: 1000,\n                  duration: 10_000, // 10 seconds\n                  onClick: (toast) => {\n                    toast.hideToast();\n                    states.prevLocation = location;\n                    navigate(\n                      instance\n                        ? `/${instance}/s/${newStatus.id}`\n                        : `/s/${newStatus.id}`,\n                    );\n                  },\n                });\n              }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showSettings && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              states.showSettings = false;\n            }\n          }}\n        >\n          <Settings\n            onClose={() => {\n              states.showSettings = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccount && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              states.showAccount = false;\n            }\n          }}\n        >\n          <Account\n            account={snapStates.showAccount?.account || snapStates.showAccount}\n            instance={snapStates.showAccount?.instance}\n            onClose={() => {\n              states.showAccount = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showDrafts && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              states.showDrafts = false;\n            }\n          }}\n        >\n          <Drafts />\n        </Modal>\n      )}\n      {!!snapStates.showMediaModal && (\n        <Modal\n          onClick={(e) => {\n            if (\n              e.target === e.currentTarget ||\n              e.target.classList.contains('media')\n            ) {\n              states.showMediaModal = false;\n            }\n          }}\n        >\n          <MediaModal\n            mediaAttachments={snapStates.showMediaModal.mediaAttachments}\n            instance={snapStates.showMediaModal.instance}\n            index={snapStates.showMediaModal.index}\n            statusID={snapStates.showMediaModal.statusID}\n            onClose={() => {\n              states.showMediaModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showShortcutsSettings && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              states.showShortcutsSettings = false;\n            }\n          }}\n        >\n          <ShortcutsSettings />\n        </Modal>\n      )}\n    </>\n  );\n}\n\n// let ws;\n// async function startStream() {\n//   const { masto, instance } = api();\n//   if (\n//     ws &&\n//     (ws.readyState === WebSocket.CONNECTING || ws.readyState === WebSocket.OPEN)\n//   ) {\n//     return;\n//   }\n\n//   const stream = await masto.v1.stream.streamUser();\n//   console.log('STREAM START', { stream });\n//   ws = stream.ws;\n\n//   const handleNewStatus = debounce((status) => {\n//     console.log('UPDATE', status);\n//     if (document.visibilityState === 'hidden') return;\n\n//     const inHomeNew = states.homeNew.find((s) => s.id === status.id);\n//     const inHome = status.id === states.homeLast?.id;\n//     if (!inHomeNew && !inHome) {\n//       if (states.settings.boostsCarousel && status.reblog) {\n//         // do nothing\n//       } else {\n//         states.homeNew.unshift({\n//           id: status.id,\n//           reblog: status.reblog?.id,\n//           reply: !!status.inReplyToAccountId,\n//         });\n//         console.log('homeNew 1', [...states.homeNew]);\n//       }\n//     }\n\n//     saveStatus(status, instance);\n//   }, 5000);\n//   stream.on('update', handleNewStatus);\n//   stream.on('status.update', (status) => {\n//     console.log('STATUS.UPDATE', status);\n//     saveStatus(status, instance);\n//   });\n//   stream.on('delete', (statusID) => {\n//     console.log('DELETE', statusID);\n//     // delete states.statuses[statusID];\n//     const s = getStatus(statusID);\n//     if (s) s._deleted = true;\n//   });\n//   stream.on('notification', (notification) => {\n//     console.log('NOTIFICATION', notification);\n\n//     const inNotificationsNew = states.notificationsNew.find(\n//       (n) => n.id === notification.id,\n//     );\n//     const inNotifications = notification.id === states.notificationsLast?.id;\n//     if (!inNotificationsNew && !inNotifications) {\n//       states.notificationsNew.unshift(notification);\n//     }\n\n//     saveStatus(notification.status, instance, { override: false });\n//   });\n\n//   stream.ws.onclose = () => {\n//     console.log('STREAM CLOSED!');\n//     if (document.visibilityState !== 'hidden') {\n//       startStream();\n//     }\n//   };\n\n//   return {\n//     stream,\n//     stopStream: () => {\n//       stream.ws.close();\n//     },\n//   };\n// }\n\n// let lastHidden;\n// function startVisibility() {\n//   const { masto, instance } = api();\n//   const handleVisible = (visible) => {\n//     if (!visible) {\n//       const timestamp = Date.now();\n//       lastHidden = timestamp;\n//     } else {\n//       const timestamp = Date.now();\n//       const diff = timestamp - lastHidden;\n//       const diffMins = Math.round(diff / 1000 / 60);\n//       console.log(`visible: ${visible}`, { lastHidden, diffMins });\n//       if (!lastHidden || diffMins > 1) {\n//         (async () => {\n//           try {\n//             const firstStatusID = states.homeLast?.id;\n//             const firstNotificationID = states.notificationsLast?.id;\n//             console.log({ states, firstNotificationID, firstStatusID });\n//             const fetchHome = masto.v1.timelines.listHome({\n//               limit: 5,\n//               ...(firstStatusID && { sinceId: firstStatusID }),\n//             });\n//             const fetchNotifications = masto.v1.notifications.list({\n//               limit: 1,\n//               ...(firstNotificationID && { sinceId: firstNotificationID }),\n//             });\n\n//             const newStatuses = await fetchHome;\n//             const hasOneAndReblog =\n//               newStatuses.length === 1 && newStatuses?.[0]?.reblog;\n//             if (newStatuses.length) {\n//               if (states.settings.boostsCarousel && hasOneAndReblog) {\n//                 // do nothing\n//               } else {\n//                 states.homeNew = newStatuses.map((status) => {\n//                   saveStatus(status, instance);\n//                   return {\n//                     id: status.id,\n//                     reblog: status.reblog?.id,\n//                     reply: !!status.inReplyToAccountId,\n//                   };\n//                 });\n//                 console.log('homeNew 2', [...states.homeNew]);\n//               }\n//             }\n\n//             const newNotifications = await fetchNotifications;\n//             if (newNotifications.length) {\n//               const notification = newNotifications[0];\n//               const inNotificationsNew = states.notificationsNew.find(\n//                 (n) => n.id === notification.id,\n//               );\n//               const inNotifications =\n//                 notification.id === states.notificationsLast?.id;\n//               if (!inNotificationsNew && !inNotifications) {\n//                 states.notificationsNew.unshift(notification);\n//               }\n\n//               saveStatus(notification.status, instance, { override: false });\n//             }\n//           } catch (e) {\n//             // Silently fail\n//             console.error(e);\n//           } finally {\n//             startStream();\n//           }\n//         })();\n//       }\n//     }\n//   };\n\n//   const handleVisibilityChange = () => {\n//     const hidden = document.visibilityState === 'hidden';\n//     handleVisible(!hidden);\n//     console.log('VISIBILITY: ' + (hidden ? 'hidden' : 'visible'));\n//   };\n//   document.addEventListener('visibilitychange', handleVisibilityChange);\n//   requestAnimationFrame(handleVisibilityChange);\n//   return {\n//     stop: () => {\n//       document.removeEventListener('visibilitychange', handleVisibilityChange);\n//     },\n//   };\n// }\n\nexport { App };\n","import './index.css';\n\nimport { render } from 'preact';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app';\n\nif (import.meta.env.DEV) {\n  import('preact/debug');\n}\n\nrender(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('app'),\n);\n\n// Storage cleanup\nsetTimeout(() => {\n  try {\n    // Clean up iconify localStorage\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n\n    // Clean up old settings key\n    localStorage.removeItem('settings:boostsCarousel');\n  } catch (e) {}\n}, 5000);\n"],"names":["AccountBlock","skeleton","account","avatarSize","instance","external","onClick","_jsxs","_jsx","Avatar","acct","avatar","avatarStatic","displayName","username","emojis","url","displayNameWithEmoji","emojifyText","e","preventDefault","states","showAccount","__html","Account","propInstance","onClose","masto","authenticated","api","uiState","setUIState","useState","isString","info","setInfo","useEffect","v1","accounts","lookup","skip_webfinger","result","v2","search","q","type","limit","resolve","length","console","error","bot","createdAt","fields","followersCount","followingCount","group","header","headerStatic","id","lastStatusAt","locked","note","statusesCount","useHotkeys","escRef","Icon","_Fragment","handleContentLinks","enhanceContent","name","value","verifiedAt","Link","year","month","RelatedActions","currentMasto","currentInstance","currentAuthenticated","sameInstance","relationshipUIState","relationship","setFamiliarFollowers","accountID","following","showingReblogs","notifying","followedBy","blocking","blockedBy","muting","mutingNotifications","requested","domainBlocking","endorsed","currentAccount","store","currentID","acctHasInstance","log","results","setRelationshipUIState","fetchRelationships","setRelationship","relationship2","relationships","fetchFamiliarFollowers","familiarFollowers","follower","newRelationship","yes","alert","Drafts","drafts","setDrafts","reloadCount","reload","useReducer","c","keys","db","ns","getCurrentAccountNS","ownKeys","filter","key","startsWith","getMany","sort","a","b","Date","updatedAt","getTime","hasDrafts","Loader","draft","draftStatus","replyTo","currentYear","getFullYear","updatedAtDate","day","weekday","hour","minute","replyToStatus","window","MiniDraft","poll","status","spoilerText","mediaAttachments","hasPoll","options","hasMedia","firstImageMedia","media","image","file","objectURL","createObjectURL","hasPollOrMedia","MediaModal","statusID","index","carouselRef","useRef","currentIndex","setCurrentIndex","carouselFocusItem","useLayoutEffect","current","scrollIntoView","prevStatusID","scrollLeft","clientWidth","differentStatusID","scrollTo","left","behavior","showControls","setShowControls","handleSwipe","addEventListener","removeEventListener","showMediaAlt","setShowMediaAlt","handleScroll","Math","round","passive","target","classList","contains","map","i","blurhash","rgbAverageColor","getBlurHashAverageColor","join","currentTarget","description","Media","stopPropagation","matchMedia","matches","remoteUrl","Modal","whiteSpace","AsyncText","children","text","setText","Promise","then","SHORTCUTS_LIMIT","TYPES","TYPE_TEXT","notifications","list","public","bookmarks","favourites","hashtag","TYPE_PARAMS","placeholder","pattern","SHORTCUTS_META","title","_","path","icon","mem","lists","fetch","cacheKey","local","query","split","ShortcutsSettings","snapStates","useSnapshot","shortcuts","setLists","followedHashtags","setFollowedHashtags","iterator","tags","done","push","settings","shortcut","values","shortcutsArr","Array","temp","ShortcutForm","data","disabled","onSubmit","currentType","forEach","setCurrentType","type2","_b","_a","tag","Shortcuts","menuRef","formattedShortcuts","useMemo","pin","Boolean","navigate","useNavigate","handler","parseInt","closeMenu","shortcutsViewMode","page","document","getElementById","updatesButton","Menu","MenuLink","usePageVisibility","fn","deps","savedCallback","handleVisibilityChange","hidden","visibilityState","useScroll","scrollableElement","distanceFromStart","distanceFromEnd","scrollThresholdStart","scrollThresholdEnd","direction","distanceFromStartPx","_distanceFromStartPx","distanceFromEndPx","_distanceFromEndPx","scrollDirection","setScrollDirection","reachStart","setReachStart","reachEnd","setReachEnd","nearReachStart","setNearReachStart","nearReachEnd","setNearReachEnd","isVertical","previousScrollStart","scrollTop","onScroll","scrollHeight","scrollWidth","clientHeight","scrollStart","scrollDimension","clientDimension","scrollDistance","abs","min","init","dispatchEvent","Event","NavMenu","props","showFollowing","shortcutsColumnsMode","find","body","notificationsShowNew","opacity","MenuDivider","MenuItem","showShortcutsSettings","showSettings","Timeline","titleComponent","emptyText","errorText","useItemID","boostsCarousel","fetchItems","checkForUpdates","checkForUpdatesInterval","headerStart","headerEnd","items","setItems","showMore","setShowMore","showNew","setShowNew","visible","setVisible","scrollableRef","loadItems","useDebouncedCallback","firstLoad","groupBoosts","items2","itemsSelector","jRef","activeItem","activeElement","closest","activeItemRect","from","querySelectorAll","activeItemIndex","nextItem","item","topmostItem","allItems","itemRect","kRef","prevItem","oRef","lastHiddenTime","timeDiff","visible2","useInterval","hasUpdate","hiddenUI","node","top","actualStatusID","reblog","statusID2","url2","actualStatusID2","Status","InView","inView","newValues","boostStash","serialBoosts","boostStashID","half","StatusCarousel","className","LIMIT","AccountStatuses","params","useParams","accountStatusesIterator","fetchAccountStatuses","pinnedStatuses","listStatuses","pinned","next","_pinned","pinnedStatusesIds","setAccount","useTitle","acc","Bookmarks","bookmarksIterator","fetchBookmarks","Favourites","favouritesIterator","fetchFavourites","FollowedHashtags","setUiState","followedTags","Following","homeIterator","latestItem","fetchHome","timelines","listHome","saveStatus","aDate","since_id","ws","streamUser","stream","on","s","TAGS_LIMIT_PER_MODE","TOTAL_TAGS_LIMIT","Hashtags","hashtags","trim","hashtagTitle","t","hashtagsIterator","fetchHashtags","listHashtag","any","slice","followUIState","setFollowUIState","reachLimit","unfollow","showToast","catch","finally","FocusableItem","ref","newHashtag","MenuGroup","splice","some","List","listIterator","fetchList","listList","setTitle","contentText","mention","follow","follow_request","favourite","update","Notifications","onlyMentions","setOnlyMentions","notificationsIterator","allNotifications","notification","groupedNotifications","groupNotifications","notificationsLast","notificationsLastFetchTime","loadNotifications2","fetchNotifications","loadNotifications","todayDate","currentDay","showTodayEmpty","notificationDay","differentDay","heading","yesterdayDate","format","Notification","_accounts","get","isSelf","isVoted","voted","NameText","RelativeTime","FollowRequestButtons","account2","onChange","notificationsMap","cleanNotifications","mappedNotification","n","memo","Public","isLocal","publicIterator","fetchPublic","listPublic","newInstance","prompt","test","toLowerCase","Columns","components","Component","Hashtag","focus","Home","showDrafts","shiftKey","openCompose","showCompose","allStatuses","homeValues","inReplyToAccountId","specialHome","floor","home","loadStatuses","homeLastFetchTime","fetchStatuses","activeStatus","allStatusLinks","activeStatusRect","nextStatus","activeStatusIndex","topmostStatusLink","statusLink","statusLinkRect","prevStatus","setShowUpdatesButton","isNewAndTop","showUpdatesButton","uniqueHomeNew","boosts","BoostsCarousel","boost","Lists","instancesListURL","VITE_CLIENT_NAME","CLIENT_NAME","VITE_WEBSITE","WEBSITE","import","registerApplication","instanceURL","registrationParams","URLSearchParams","client_name","redirect_uris","location","origin","scopes","website","method","headers","toString","json","registrationJSON","getAuthorizationURL","client_id","authorizationParams","scope","response_type","authorizationURL","client_secret","code","redirect_uri","grant_type","tokenResponse","Login","instanceURLRef","cachedInstanceURL","instancesList","setInstancesList","textAlign","elements","session","href","Search","searchParams","setSearchParams","useSearchParams","searchFieldRef","statusResults","setStatusResults","accountResults","setAccountResults","hashtagResults","setHashtagResults","q2","logo","Settings","getJSON","currentTheme","themeFormRef","moreThanOneAccount","currentDefault","setCurrentDefault","x","isCurrent","isDefault","set","theme","formData","html","documentElement","remove","toggle","querySelector","del","checked","verticalAlign","__BUILD_TIME__","__COMMIT_HASH__","THREAD_LIMIT","cachedStatusesMap","resetScrollPosition","scrollPositions","StatusPage","statuses","setStatuses","heroStatusRef","sKey","statusKey","debounce","cancel","scrollOffsets","initContext","debug","heroTimer","cachedStatuses","reallyCachedStatuses","heroFetch","pRetry","contextFetch","hasStatus","heroStatus2","heroStatus","setTimeout","context","ancestors2","descendants","ancestors","nestedDescendants","parent","__replies","warn","r","r2","r3","repliesCount","content","offsetTop","threadifyStatus","scrollPosition","clearTimeout","newScrollOffsets","newScrollTop","getCurrentAccount","contextURL","heroDisplayName","div","heroContentText","apiCache","closeLink","pathname","prevLocation","matchPath","heroInView","setHeroInView","heroPointer","createElement","hasManyStatuses","onView","details","nextElementSibling","open","reloadStatusPage","shortenNumber","button","ancestor","descendant","thread","replies","isHero","buttons","click","status2","SubComments","hasDescendants","setLimit","l","hasParentThread","isBrief","reply","htmlContentLength","diveDeep","replies2","replies3","count","totalComments","sameCount","arr","containsSubReplies","totalLength","reduce","Welcome","aspectRatio","__STATES__","App","isLoggedIn","setIsLoggedIn","add","setAttribute","match","clientSecret","accessToken","access_token","initPreferences","locationDeckMap","timer","focusDeck","showModal","notificationStream","backgroundLocation","isModalPage","nonRootLocation","Route","HomeV1","Routes","Compose","_c","_d","_e","newStatus","toast","duration","_g","render","HashRouter","Object","localStorage","removeItem","sessionStorage"],"mappings":"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"}